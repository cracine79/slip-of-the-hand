/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_keyboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/keyboard.js */ \"./src/scripts/keyboard.js\");\n/* harmony import */ var _scripts_example_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/example.js */ \"./src/scripts/example.js\");\n/* harmony import */ var _scripts_word_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/word.js */ \"./src/scripts/word.js\");\n/* harmony import */ var _scripts_session_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scripts/session.js */ \"./src/scripts/session.js\");\n/* harmony import */ var _scripts_form_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scripts/form.js */ \"./src/scripts/form.js\");\n/* harmony import */ var _scripts_macWindow_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scripts/macWindow.js */ \"./src/scripts/macWindow.js\");\n/* harmony import */ var _scripts_explanation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scripts/explanation.js */ \"./src/scripts/explanation.js\");\n\n\n\n\n\n\n\nconsole.log(\"entry point working!\");\n(0,_scripts_example_js__WEBPACK_IMPORTED_MODULE_1__.fn1)();\n\n// const handleKeyDown = function(event){\n//     console.log(\"key!\");\n//     \"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach((letter) => {\n//         if (event.key === letter){\n//             keyboard.className = `${letter}_pressed`\n//         }\n//     })\n\n// }\n\n// const storeWord = function(event){\n//     event.preventDefault();\n//     const word = form.inputbox.value;\n//     console.log(word)\n// }\n\n// const form = document.getElementById('getSloth');\n// form.addEventListener(\"submit\", storeWord);\n\n// const session = new Session(\"hat\");\n// const sloths = session.generateSlothsArray();\n// console.log(sloths)\n\n// let word = new Word(\"find\");\n// word.allPatternsCompiled();\n// let sloths = word.allPossibleSloths();\n// // console.log(sloths)\n// const slothArray = [];\n\n// sloths.forEach(async function fetchWord(word){\n//     const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)\n//     if (response.ok){\n//         return response.json().then((wordDef) => slothArray.push(wordDef))\n//     }\n\n// let dataMuseUrl = `https://api.dictionaryapi.dev/api/v2/entries/en/${word}`\n// fetch(dataMuseUrl)\n//     .then(response => {return response.json()})\n//     .then(data => {console.log(data)})\n// })\n// console.log(slothArray)\n\n// console.log(word)\n// console.log(word.KEYBOARD)\n// const chopped = word.toFullPattern()\n// console.log(\"word\")\n// console.log(word.value)\n// console.log(\"left\")\n// console.log(word.toLeftPattern())\n// console.log(\"right pattern\")\n// const rightPattern = word.toRightPattern();\n// console.log(rightPattern);\n\n// let alp = word.allLeftPatterns();\n// let arp = word.allRightPatterns();\n// console.log(arp)\n// console.log(alp)\n\n// console.log(word.allPatternsCompiled()[0])\n// console.log(word.allPossibleSloths())//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFcUQ7QUFDWDtBQUNOO0FBQ007QUFDRTtBQUNFO0FBQ0k7QUFHbERPLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHNCQUFzQixDQUFDO0FBQ25DUCx3REFBRyxDQUFDLENBQUM7O0FBSUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUk7QUFDQTtBQUNBO0FBQ0E7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGlwX29mX3RoZV9oYW5kLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCB7IGhhbmRsZUtleURvd24gfSBmcm9tIFwiLi9zY3JpcHRzL2tleWJvYXJkLmpzXCJcbmltcG9ydCB7IGZuMSB9IGZyb20gXCIuL3NjcmlwdHMvZXhhbXBsZS5qc1wiXG5pbXBvcnQgV29yZCBmcm9tIFwiLi9zY3JpcHRzL3dvcmQuanNcIlxuaW1wb3J0IFNlc3Npb24gZnJvbSBcIi4vc2NyaXB0cy9zZXNzaW9uLmpzXCJcbmltcG9ydCB7aGFuZGxlV29yZH0gZnJvbSBcIi4vc2NyaXB0cy9mb3JtLmpzXCJcbmltcG9ydCBtYWNXaW5kb3cgZnJvbSBcIi4vc2NyaXB0cy9tYWNXaW5kb3cuanNcIlxuaW1wb3J0IEV4cGxhbmF0aW9uIGZyb20gXCIuL3NjcmlwdHMvZXhwbGFuYXRpb24uanNcIlxuXG5cbmNvbnNvbGUubG9nKFwiZW50cnkgcG9pbnQgd29ya2luZyFcIilcbmZuMSgpXG5cblxuXG4vLyBjb25zdCBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24oZXZlbnQpe1xuLy8gICAgIGNvbnNvbGUubG9nKFwia2V5IVwiKTtcbi8vICAgICBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCIuc3BsaXQoXCJcIikuZm9yRWFjaCgobGV0dGVyKSA9PiB7XG4vLyAgICAgICAgIGlmIChldmVudC5rZXkgPT09IGxldHRlcil7XG4vLyAgICAgICAgICAgICBrZXlib2FyZC5jbGFzc05hbWUgPSBgJHtsZXR0ZXJ9X3ByZXNzZWRgXG4vLyAgICAgICAgIH1cbi8vICAgICB9KVxuICAgXG4vLyB9XG5cbi8vIGNvbnN0IHN0b3JlV29yZCA9IGZ1bmN0aW9uKGV2ZW50KXtcbi8vICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuLy8gICAgIGNvbnN0IHdvcmQgPSBmb3JtLmlucHV0Ym94LnZhbHVlO1xuLy8gICAgIGNvbnNvbGUubG9nKHdvcmQpXG4vLyB9XG5cblxuXG5cbi8vIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2V0U2xvdGgnKTtcbi8vIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBzdG9yZVdvcmQpO1xuXG5cbi8vIGNvbnN0IHNlc3Npb24gPSBuZXcgU2Vzc2lvbihcImhhdFwiKTtcbi8vIGNvbnN0IHNsb3RocyA9IHNlc3Npb24uZ2VuZXJhdGVTbG90aHNBcnJheSgpO1xuLy8gY29uc29sZS5sb2coc2xvdGhzKVxuXG5cblxuXG4vLyBsZXQgd29yZCA9IG5ldyBXb3JkKFwiZmluZFwiKTtcbi8vIHdvcmQuYWxsUGF0dGVybnNDb21waWxlZCgpO1xuLy8gbGV0IHNsb3RocyA9IHdvcmQuYWxsUG9zc2libGVTbG90aHMoKTtcbi8vIC8vIGNvbnNvbGUubG9nKHNsb3Rocylcbi8vIGNvbnN0IHNsb3RoQXJyYXkgPSBbXTtcblxuLy8gc2xvdGhzLmZvckVhY2goYXN5bmMgZnVuY3Rpb24gZmV0Y2hXb3JkKHdvcmQpe1xuLy8gICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXBpLmRpY3Rpb25hcnlhcGkuZGV2L2FwaS92Mi9lbnRyaWVzL2VuLyR7d29yZH1gKVxuLy8gICAgIGlmIChyZXNwb25zZS5vayl7XG4vLyAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCkudGhlbigod29yZERlZikgPT4gc2xvdGhBcnJheS5wdXNoKHdvcmREZWYpKVxuLy8gICAgIH1cbiAgICBcbiAgICAvLyBsZXQgZGF0YU11c2VVcmwgPSBgaHR0cHM6Ly9hcGkuZGljdGlvbmFyeWFwaS5kZXYvYXBpL3YyL2VudHJpZXMvZW4vJHt3b3JkfWBcbiAgICAvLyBmZXRjaChkYXRhTXVzZVVybClcbiAgICAvLyAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge3JldHVybiByZXNwb25zZS5qc29uKCl9KVxuICAgIC8vICAgICAudGhlbihkYXRhID0+IHtjb25zb2xlLmxvZyhkYXRhKX0pXG4vLyB9KVxuLy8gY29uc29sZS5sb2coc2xvdGhBcnJheSlcblxuLy8gY29uc29sZS5sb2cod29yZClcbi8vIGNvbnNvbGUubG9nKHdvcmQuS0VZQk9BUkQpXG4vLyBjb25zdCBjaG9wcGVkID0gd29yZC50b0Z1bGxQYXR0ZXJuKClcbi8vIGNvbnNvbGUubG9nKFwid29yZFwiKVxuLy8gY29uc29sZS5sb2cod29yZC52YWx1ZSlcbi8vIGNvbnNvbGUubG9nKFwibGVmdFwiKVxuLy8gY29uc29sZS5sb2cod29yZC50b0xlZnRQYXR0ZXJuKCkpXG4vLyBjb25zb2xlLmxvZyhcInJpZ2h0IHBhdHRlcm5cIilcbi8vIGNvbnN0IHJpZ2h0UGF0dGVybiA9IHdvcmQudG9SaWdodFBhdHRlcm4oKTtcbi8vIGNvbnNvbGUubG9nKHJpZ2h0UGF0dGVybik7XG5cblxuXG4vLyBsZXQgYWxwID0gd29yZC5hbGxMZWZ0UGF0dGVybnMoKTtcbi8vIGxldCBhcnAgPSB3b3JkLmFsbFJpZ2h0UGF0dGVybnMoKTtcbi8vIGNvbnNvbGUubG9nKGFycClcbi8vIGNvbnNvbGUubG9nKGFscClcblxuLy8gY29uc29sZS5sb2cod29yZC5hbGxQYXR0ZXJuc0NvbXBpbGVkKClbMF0pXG4vLyBjb25zb2xlLmxvZyh3b3JkLmFsbFBvc3NpYmxlU2xvdGhzKCkpXG5cblxuXG4iXSwibmFtZXMiOlsiaGFuZGxlS2V5RG93biIsImZuMSIsIldvcmQiLCJTZXNzaW9uIiwiaGFuZGxlV29yZCIsIm1hY1dpbmRvdyIsIkV4cGxhbmF0aW9uIiwiY29uc29sZSIsImxvZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/example.js":
/*!********************************!*\
  !*** ./src/scripts/example.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fn1: function() { return /* binding */ fn1; }\n/* harmony export */ });\nconst fn1 = () => {\n  console.log(\"connected!\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9leGFtcGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFHTyxNQUFNQSxHQUFHLEdBQUdBLENBQUEsS0FBTTtFQUFFQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxZQUFZLENBQUM7QUFBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xpcF9vZl90aGVfaGFuZC8uL3NyYy9zY3JpcHRzL2V4YW1wbGUuanM/ZmNlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuXG5leHBvcnQgY29uc3QgZm4xID0gKCkgPT4geyBjb25zb2xlLmxvZyhcImNvbm5lY3RlZCFcIikgfSA7Il0sIm5hbWVzIjpbImZuMSIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/example.js\n");

/***/ }),

/***/ "./src/scripts/explanation.js":
/*!************************************!*\
  !*** ./src/scripts/explanation.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Explanation {\n  constructor(rulesbox) {\n    this.rulesbox = rulesbox;\n  }\n  renderScreen() {}\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Explanation);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9leHBsYW5hdGlvbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsV0FBVztFQUViQyxXQUFXQSxDQUFDQyxRQUFRLEVBQUU7SUFDdEIsSUFBSSxDQUFDQSxRQUFRLEdBQUdBLFFBQVE7RUFDeEI7RUFFQUMsWUFBWUEsQ0FBQSxFQUFFLENBR2Q7QUFHSjtBQUtBLCtEQUFlSCxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xpcF9vZl90aGVfaGFuZC8uL3NyYy9zY3JpcHRzL2V4cGxhbmF0aW9uLmpzPzk0MzYiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRXhwbGFuYXRpb257XG4gICAgXG4gICAgY29uc3RydWN0b3IocnVsZXNib3gpIHtcbiAgICB0aGlzLnJ1bGVzYm94ID0gcnVsZXNib3g7XG4gICAgfVxuXG4gICAgcmVuZGVyU2NyZWVuKCl7XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG5cblxufVxuXG5cblxuXG5leHBvcnQgZGVmYXVsdCBFeHBsYW5hdGlvbjsiXSwibmFtZXMiOlsiRXhwbGFuYXRpb24iLCJjb25zdHJ1Y3RvciIsInJ1bGVzYm94IiwicmVuZGVyU2NyZWVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/explanation.js\n");

/***/ }),

/***/ "./src/scripts/form.js":
/*!*****************************!*\
  !*** ./src/scripts/form.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleWord: function() { return /* binding */ handleWord; }\n/* harmony export */ });\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./session.js */ \"./src/scripts/session.js\");\n\nfunction handleWord(event) {\n  event.preventDefault();\n  const clippy = document.getElementById('clippy');\n  if (clippy) {\n    clippy.style.display = \"none\";\n  }\n  const slothGenBox = document.getElementById('slothgen-box');\n  slothGenBox.style.display = 'none';\n  const handposBox = document.getElementById('handpos-box');\n  handposBox.style.display = 'none';\n  const handPosText = document.getElementById('handpos-text');\n  handPosText.innerHTML = \"\";\n  const handPosText2 = document.getElementById('handpos-text2');\n  const hpKids = handPosText2.children;\n  const slothCatBox = document.getElementById('slothcat-box');\n  slothCatBox.style.display = 'none';\n  const previous = document.getElementById(\"previous\");\n  previous.style.display = 'none';\n  for (let i = 0; i < hpKids.length; i++) {\n    hpKids[i].innerHTML = \"\";\n  }\n  const intro = document.getElementById('intro-box');\n  intro.style.display = 'none';\n  const explanation = document.getElementById('explanation-box');\n  explanation.style.display = 'none';\n  const word = form.inputbox.value;\n  const session = new _session_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](word);\n  const rules = document.getElementById('rules');\n  rules.style.display = 'none';\n  const home = document.getElementById('instructions');\n  home.style.display = 'inline';\n  session.generateSlothsArray();\n  const header = document.getElementById('slHeader');\n  const listBox = document.getElementById('list-box');\n  listBox.style.display = \"flex\";\n  header.style.display = \"inline\";\n  const keyToppers = document.getElementsByClassName(\"keyTopper\");\n  for (let i = 0; i < keyToppers.length; i++) {\n    keyToppers[i].style.display = 'none';\n  }\n}\nconst form = document.getElementById('getSloth');\nform.addEventListener(\"submit\", handleWord);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9mb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtDO0FBRWxDLFNBQVNDLFVBQVVBLENBQUVDLEtBQUssRUFBQztFQUN2QkEsS0FBSyxDQUFDQyxjQUFjLENBQUMsQ0FBQztFQUV0QixNQUFNQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLFFBQVEsQ0FBQztFQUNoRCxJQUFJRixNQUFNLEVBQUU7SUFDWkEsTUFBTSxDQUFDRyxLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO0VBQzdCO0VBQ0EsTUFBTUMsV0FBVyxHQUFHSixRQUFRLENBQUNDLGNBQWMsQ0FBQyxjQUFjLENBQUM7RUFDM0RHLFdBQVcsQ0FBQ0YsS0FBSyxDQUFDQyxPQUFPLEdBQUcsTUFBTTtFQUNsQyxNQUFNRSxVQUFVLEdBQUdMLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLGFBQWEsQ0FBQztFQUN6REksVUFBVSxDQUFDSCxLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO0VBQ2pDLE1BQU1HLFdBQVcsR0FBR04sUUFBUSxDQUFDQyxjQUFjLENBQUMsY0FBYyxDQUFDO0VBQzNESyxXQUFXLENBQUNDLFNBQVMsR0FBRyxFQUFFO0VBQzFCLE1BQU1DLFlBQVksR0FBR1IsUUFBUSxDQUFDQyxjQUFjLENBQUMsZUFBZSxDQUFDO0VBQzdELE1BQU1RLE1BQU0sR0FBR0QsWUFBWSxDQUFDRSxRQUFRO0VBQ3BDLE1BQU1DLFdBQVcsR0FBR1gsUUFBUSxDQUFDQyxjQUFjLENBQUMsY0FBYyxDQUFDO0VBQzNEVSxXQUFXLENBQUNULEtBQUssQ0FBQ0MsT0FBTyxHQUFHLE1BQU07RUFFbEMsTUFBTVMsUUFBUSxHQUFHWixRQUFRLENBQUNDLGNBQWMsQ0FBQyxVQUFVLENBQUM7RUFDcERXLFFBQVEsQ0FBQ1YsS0FBSyxDQUFDQyxPQUFPLEdBQUcsTUFBTTtFQUUvQixLQUFJLElBQUlVLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0osTUFBTSxDQUFDSyxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFDO0lBQ2xDSixNQUFNLENBQUNJLENBQUMsQ0FBQyxDQUFDTixTQUFTLEdBQUcsRUFBRTtFQUM1QjtFQUNBLE1BQU1RLEtBQUssR0FBR2YsUUFBUSxDQUFDQyxjQUFjLENBQUMsV0FBVyxDQUFDO0VBQ2xEYyxLQUFLLENBQUNiLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLE1BQU07RUFDNUIsTUFBTWEsV0FBVyxHQUFHaEIsUUFBUSxDQUFDQyxjQUFjLENBQUMsaUJBQWlCLENBQUM7RUFDOURlLFdBQVcsQ0FBQ2QsS0FBSyxDQUFDQyxPQUFPLEdBQUcsTUFBTTtFQUNsQyxNQUFNYyxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxLQUFLO0VBQ2hDLE1BQU1DLE9BQU8sR0FBRyxJQUFJMUIsbURBQU8sQ0FBQ3NCLElBQUksQ0FBQztFQUNqQyxNQUFNSyxLQUFLLEdBQUd0QixRQUFRLENBQUNDLGNBQWMsQ0FBQyxPQUFPLENBQUM7RUFDOUNxQixLQUFLLENBQUNwQixLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO0VBQzVCLE1BQU1vQixJQUFJLEdBQUd2QixRQUFRLENBQUNDLGNBQWMsQ0FBQyxjQUFjLENBQUM7RUFDcERzQixJQUFJLENBQUNyQixLQUFLLENBQUNDLE9BQU8sR0FBRyxRQUFRO0VBQzdCa0IsT0FBTyxDQUFDRyxtQkFBbUIsQ0FBQyxDQUFDO0VBQzdCLE1BQU1DLE1BQU0sR0FBR3pCLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLFVBQVUsQ0FBQztFQUNsRCxNQUFNeUIsT0FBTyxHQUFHMUIsUUFBUSxDQUFDQyxjQUFjLENBQUMsVUFBVSxDQUFDO0VBQ25EeUIsT0FBTyxDQUFDeEIsS0FBSyxDQUFDQyxPQUFPLEdBQUcsTUFBTTtFQUM5QnNCLE1BQU0sQ0FBQ3ZCLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLFFBQVE7RUFDL0IsTUFBTXdCLFVBQVUsR0FBRzNCLFFBQVEsQ0FBQzRCLHNCQUFzQixDQUFDLFdBQVcsQ0FBQztFQUMvRCxLQUFJLElBQUlmLENBQUMsR0FBRSxDQUFDLEVBQUVBLENBQUMsR0FBQ2MsVUFBVSxDQUFDYixNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFDO0lBQ25DYyxVQUFVLENBQUNkLENBQUMsQ0FBQyxDQUFDWCxLQUFLLENBQUNDLE9BQU8sR0FBRyxNQUFNO0VBQ3hDO0FBQ0o7QUFLQSxNQUFNZSxJQUFJLEdBQUdsQixRQUFRLENBQUNDLGNBQWMsQ0FBQyxVQUFVLENBQUM7QUFDaERpQixJQUFJLENBQUNXLGdCQUFnQixDQUFDLFFBQVEsRUFBRWpDLFVBQVUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsaXBfb2ZfdGhlX2hhbmQvLi9zcmMvc2NyaXB0cy9mb3JtLmpzP2M3NGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlc3Npb24gZnJvbSBcIi4vc2Vzc2lvbi5qc1wiXG5cbmZ1bmN0aW9uIGhhbmRsZVdvcmQgKGV2ZW50KXtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIFxuICAgIGNvbnN0IGNsaXBweSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbGlwcHknKTtcbiAgICBpZiAoY2xpcHB5KSB7XG4gICAgY2xpcHB5LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxuICAgIH1cbiAgICBjb25zdCBzbG90aEdlbkJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbG90aGdlbi1ib3gnKTtcbiAgICBzbG90aEdlbkJveC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgY29uc3QgaGFuZHBvc0JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoYW5kcG9zLWJveCcpXG4gICAgaGFuZHBvc0JveC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGNvbnN0IGhhbmRQb3NUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hhbmRwb3MtdGV4dCcpO1xuICAgIGhhbmRQb3NUZXh0LmlubmVySFRNTCA9IFwiXCI7XG4gICAgY29uc3QgaGFuZFBvc1RleHQyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hhbmRwb3MtdGV4dDInKTtcbiAgICBjb25zdCBocEtpZHMgPSBoYW5kUG9zVGV4dDIuY2hpbGRyZW47XG4gICAgY29uc3Qgc2xvdGhDYXRCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2xvdGhjYXQtYm94Jyk7XG4gICAgc2xvdGhDYXRCb3guc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIGNvbnN0IHByZXZpb3VzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmV2aW91c1wiKTtcbiAgICBwcmV2aW91cy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGhwS2lkcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGhwS2lkc1tpXS5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH1cbiAgICBjb25zdCBpbnRybyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnRyby1ib3gnKTtcbiAgICBpbnRyby5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgY29uc3QgZXhwbGFuYXRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhwbGFuYXRpb24tYm94Jyk7XG4gICAgZXhwbGFuYXRpb24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBjb25zdCB3b3JkID0gZm9ybS5pbnB1dGJveC52YWx1ZTtcbiAgICBjb25zdCBzZXNzaW9uID0gbmV3IFNlc3Npb24od29yZClcbiAgICBjb25zdCBydWxlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdydWxlcycpXG4gICAgcnVsZXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBjb25zdCBob21lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luc3RydWN0aW9ucycpO1xuICAgIGhvbWUuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUnXG4gICAgc2Vzc2lvbi5nZW5lcmF0ZVNsb3Roc0FycmF5KCk7XG4gICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NsSGVhZGVyJylcbiAgICBjb25zdCBsaXN0Qm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpc3QtYm94JylcbiAgICBsaXN0Qm94LnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIlxuICAgIGhlYWRlci5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmVcIlxuICAgIGNvbnN0IGtleVRvcHBlcnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwia2V5VG9wcGVyXCIpO1xuICAgIGZvcihsZXQgaSA9MDsgaTxrZXlUb3BwZXJzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAga2V5VG9wcGVyc1tpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgfVxufVxuXG5cblxuXG5jb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dldFNsb3RoJyk7XG5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgaGFuZGxlV29yZCk7XG5cbmV4cG9ydCB7aGFuZGxlV29yZH0iXSwibmFtZXMiOlsiU2Vzc2lvbiIsImhhbmRsZVdvcmQiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiY2xpcHB5IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiZGlzcGxheSIsInNsb3RoR2VuQm94IiwiaGFuZHBvc0JveCIsImhhbmRQb3NUZXh0IiwiaW5uZXJIVE1MIiwiaGFuZFBvc1RleHQyIiwiaHBLaWRzIiwiY2hpbGRyZW4iLCJzbG90aENhdEJveCIsInByZXZpb3VzIiwiaSIsImxlbmd0aCIsImludHJvIiwiZXhwbGFuYXRpb24iLCJ3b3JkIiwiZm9ybSIsImlucHV0Ym94IiwidmFsdWUiLCJzZXNzaW9uIiwicnVsZXMiLCJob21lIiwiZ2VuZXJhdGVTbG90aHNBcnJheSIsImhlYWRlciIsImxpc3RCb3giLCJrZXlUb3BwZXJzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/form.js\n");

/***/ }),

/***/ "./src/scripts/keyboard.js":
/*!*********************************!*\
  !*** ./src/scripts/keyboard.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleKeyDown: function() { return /* binding */ handleKeyDown; }\n/* harmony export */ });\nconst KEYBOARD = [\"1234567890-=\".split(\"\"), [\"tab\"].concat(\"qwertyuiop[]\".split(\"\")), [\"caps lock\"].concat(\"asdfghjkl;'\".split(\"\")), [\"shift\"].concat(\"zxcvbnm,./\".split(\"\")).concat([\"shift\"]), [\"\", \"\", \"\", \" \", \" \", \" \", \" \", \" \", \" \", \"\", \"\", \"\"]];\nconst handleKeyDown = function (event) {\n  const keyToppers = document.getElementsByClassName(\"keyTopper\");\n  for (let i = 0; i < keyToppers.length; i++) {\n    keyToppers[i].style.display = 'none';\n  }\n  const slothToppers = document.getElementsByClassName(\"slothTopper\");\n  for (let i = 0; i < slothToppers.length; i++) {\n    slothToppers[i].style.display = 'none';\n  }\n  \"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach(letter => {\n    if (event.key === letter) {\n      keyboard.className = `${letter}_pressed`;\n      if (KEYBOARD[1].slice(0, 6).includes(letter) || KEYBOARD[2].slice(0, 6).includes(letter) || KEYBOARD[3].slice(0, 6).includes(letter) || KEYBOARD[4].slice(0, 6).includes(letter)) {\n        leftHand.id = `lh_${letter}_pressed`;\n      } else {\n        rightHand.id = `rh_${letter}_pressed`;\n      }\n    } else if (event.key === \"[\") {\n      rightHand.id = \"rh_lbrac_pressed\";\n      keyboard.className = \"lbrac_pressed\";\n    } else if (event.key === \"]\") {\n      rightHand.id = \"rh_rbrac_pressed\";\n      keyboard.className = \"rbrac_pressed\";\n    } else if (event.key === \";\") {\n      rightHand.id = \"rh_semicolon_pressed\";\n      keyboard.className = \"semicolon_pressed\";\n    } else if (event.key === \",\") {\n      rightHand.id = \"rh_comma_pressed\";\n      keyboard.className = \"comma_pressed\";\n    } else if (event.key === \".\") {\n      rightHand.id = \"rh_period_pressed\";\n      keyboard.className = \"period_pressed\";\n    } else if (event.key === \"/\") {\n      rightHand.id = \"rh_slash_pressed\";\n      keyboard.className = \"slash_pressed\";\n    } else if (event.key === `'`) {\n      rightHand.id = \"rh_quote_pressed\";\n      keyboard.className = \"quote_pressed\";\n    } else if (event.code === 'Space') {\n      event.preventDefault();\n      rightHand.id = \"rh_space_pressed\";\n      keyboard.className = \"space_pressed\";\n    }\n  });\n};\nconst keyboard = document.getElementById('keyboard');\nconst leftHand = document.querySelector('.leftHand');\nconst rightHand = document.querySelector('.rightHand');\naddEventListener(\"keydown\", handleKeyDown);\naddEventListener(\"keyup\", e => {\n  keyboard.className = \"unpressed\";\n  leftHand.id = \"lh_unpressed\";\n  rightHand.id = \"rh_unpressed\";\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/keyboard.js\n");

/***/ }),

/***/ "./src/scripts/macWindow.js":
/*!**********************************!*\
  !*** ./src/scripts/macWindow.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mWind: function() { return /* binding */ mWind; }\n/* harmony export */ });\n/* harmony import */ var _word_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./word.js */ \"./src/scripts/word.js\");\n\nvar muted = false;\nclass MacWindow {\n  constructor() {\n    this.view = document.getElementById(\"inner-monitor\");\n    this.form = document.getElementById(\"getSloth\");\n    this.innerbox = document.getElementById(\"innerBox\");\n    this.slothList = document.getElementById(\"sloth-list\");\n    this.typing = new Audio('../sounds/keyboard-typing-5997.mp3');\n    this.type = new Audio('../sounds/onetype.mp3');\n    const mute = document.getElementById('mouse');\n    let that = this;\n    mute.addEventListener('click', this.handleClick);\n  }\n  playClicking() {\n    if (muted === false) {\n      this.typing.play();\n    }\n  }\n  playClick() {\n    if (muted === false) {\n      this.type.play();\n    }\n  }\n  handleClick() {\n    const mouse = document.getElementById('mouse');\n    if (muted === false) {\n      muted = true;\n      mouse.style.backgroundImage = \"url(../images/Unmute.png)\";\n      console.log(muted);\n    } else {\n      muted = false;\n      console.log(muted);\n      mouse.style.backgroundImage = 'none';\n    }\n  }\n  async typeWords(sentence, typedOn) {\n    let wait = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    const letters = sentence.split(\"\");\n    let i = 0;\n    const keyboard = document.getElementById(\"keyboard\");\n    while (i < letters.length) {\n      await this.waitForMs(wait);\n      typedOn.append(letters[i]);\n      i++;\n    }\n  }\n  async keysTypeWords(sentence, typedOn) {\n    let wait = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    const letters = sentence.split(\"\");\n    let i = 0;\n    const keyboard = document.getElementById(\"keyboard\");\n    while (i < letters.length) {\n      await this.waitForMs(wait);\n      typedOn.append(letters[i]);\n      if (letters[i] === \" \") {\n        keyboard.className = \"space_pressed\";\n      } else {\n        keyboard.className = `${letters[i].toLowerCase()}_pressed`;\n      }\n      i++;\n    }\n    await this.waitForMs(wait);\n    keyboard.className = \"unpressed\";\n  }\n  async handsTypeWords(sentence, typedOn) {\n    let wait = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    let orig = arguments.length > 3 ? arguments[3] : undefined;\n    let color = arguments.length > 4 ? arguments[4] : undefined;\n    let classname = arguments.length > 5 ? arguments[5] : undefined;\n    orig ||= sentence;\n    const left = \"qwertgfdsazxcvb\".split(\"\");\n    const right = \"yuiophjklnm\".split(\"\");\n    const origLetters = new _word_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](orig);\n    const letters = new _word_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](sentence);\n    const origLettersArr = orig.split(\"\");\n    const lettersArr = sentence.split(\"\");\n    const origPattern = origLetters.toFullPattern();\n    const newPattern = letters.toFullPattern();\n    color ||= \"red\";\n    let leftShift = undefined;\n    let rightShift = undefined;\n    for (let i = 0; i < origPattern.length; i++) {\n      if (left.includes(origLettersArr[i].toLowerCase()) && leftShift === undefined) {\n        let leftVertShift = newPattern[i][0] - origPattern[i][0];\n        let leftHorizShift = newPattern[i][1] - origPattern[i][1];\n        leftShift = [leftVertShift, leftHorizShift];\n      } else if (rightShift === undefined) {\n        let rightVertShift = newPattern[i][0] - origPattern[i][0];\n        let rightHorizShift = newPattern[i][1] - origPattern[i][1];\n        rightShift = [rightVertShift, rightHorizShift];\n      }\n    }\n    leftShift ||= [0, 0];\n    rightShift ||= [0, 0];\n    let i = 0;\n    const keyboard = document.getElementById(\"keyboard\");\n    const leftHand = document.getElementsByClassName(\"leftHand\")[0];\n    const rightHand = document.getElementsByClassName(\"rightHand\")[0];\n    leftHand.style.paddingLeft = `${70 + leftShift[1] * 45}px`;\n    leftHand.style.paddingTop = `${100 + leftShift[0] * 45}px`;\n    rightHand.style.paddingLeft = `${360 + rightShift[1] * 45}px`;\n    rightHand.style.paddingTop = `${100 + rightShift[0] * 45}px`;\n    while (i < lettersArr.length) {\n      typedOn.append(lettersArr[i]);\n      if (lettersArr[i] === \" \") {\n        keyboard.className = \"space_pressed\";\n        rightHand.id = \"rh_space_pressed\";\n      } else {\n        keyboard.className = `${lettersArr[i].toLowerCase()}_pressed`;\n      }\n      if (left.includes(origLettersArr[i].toLowerCase())) {\n        leftHand.id = `lh_${origLettersArr[i].toLowerCase()}_pressed`;\n        rightHand.id = \"rh_unpressed\";\n      } else if (right.includes(origLettersArr[i].toLowerCase())) {\n        rightHand.id = `rh_${origLettersArr[i].toLowerCase()}_pressed`;\n        leftHand.id = \"lh_unpressed\";\n      }\n      classname ||= \"keyTopper\";\n      this.playClick();\n      let key = document.createElement('div');\n      key.id = `${lettersArr[i].toLowerCase()}_topper`;\n      key.className = classname;\n      key.style.backgroundColor = `${color}`;\n      let keyHand = document.getElementById('hands_keys');\n      keyHand.append(key);\n      await this.waitForMs(wait);\n      i++;\n    }\n    keyboard.className = \"unpressed\";\n    leftHand.id = `lh_unpressed`;\n    rightHand.id = `rh_unpressed`;\n    rightHand.style.paddingLeft = \"360px\";\n    rightHand.style.paddingTop = \"100px\";\n    leftHand.style.paddingLeft = \"70px\";\n    leftHand.style.paddingTop = \"100px\";\n  }\n  waitForMs(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  async fillIntro() {\n    this.playClicking();\n    const head = \"Welcome to Slip of the Hand\";\n    const welcome = document.getElementById(\"welcomeToSloth\");\n    await this.typeWords(head, welcome);\n    const intro1 = \"A Slip of the Hand [SlotH] occurs when you type a word or phrase with one or both hands in the incorrect position, and another word or phrase is typed as a result.\";\n    const para1 = document.getElementById(\"introText1\");\n    await this.typeWords(intro1, para1);\n    const intro2 = \"For example, imagine the hands below are trying to type the word  \";\n    const para2 = document.getElementById(\"introText2\");\n    await this.typeWords(intro2, para2);\n    const dry = \"DRY\";\n    const drySpot = document.getElementById(\"dry\");\n    this.typing.pause();\n    await this.handsTypeWords(dry, drySpot, 700, \"dry\");\n    this.playClicking();\n    const intro2Cont = \" but accidentally started out typing one key position to the left.\";\n    const para2Cont = document.getElementById(\"introText2Cont\");\n    await this.typeWords(intro2Cont, para2Cont);\n    const leftHand = document.getElementById(\"lh_unpressed\");\n    const rightHand = document.getElementById(\"rh_unpressed\");\n    leftHand.style.paddingLeft = \"35px\";\n    rightHand.style.paddingLeft = \"325px\";\n    await this.waitForMs(500);\n    const intro2ContMore = \"  This would result in typing the word: \";\n    await this.typeWords(intro2ContMore, para2Cont);\n    const set = \"SET\";\n    const setSpot = document.getElementById(\"set\");\n    this.typing.pause();\n    await this.handsTypeWords(set, setSpot, 500, \"dry\", \"blue\");\n    await this.waitForMs(1000);\n    this.playClicking();\n    const slip = \"SLIP OF THE HAND!!\";\n    const slipSpot = document.getElementById(\"slip\");\n    await this.typeWords(slip, slipSpot);\n    this.typing.pause();\n    await this.waitForMs(1000);\n    this.playClicking();\n    const intro3 = \"Go ahead, give it a try!  Enter a word of phrase and see what slips of the hand you could have had!\";\n    const para3 = document.getElementById(\"introText3\");\n    await this.typeWords(intro3, para3);\n    this.typing.pause();\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (MacWindow);\nlet mWind = new MacWindow();\nconst startupImage = document.getElementById('startup');\nconst welcomeIn = document.getElementById('welcome');\nconst startupMonitor = document.getElementById('startup-monitor');\nconst form = document.getElementById('getSloth');\nconst parchment = document.getElementById('text-box');\nconst header = document.getElementById('welcomeToSloth');\nasync function startupSequence() {\n  await mWind.waitForMs(500);\n  startupImage.style.display = \"block\";\n  await mWind.waitForMs(2000);\n  startupImage.style.display = \"none\";\n  await mWind.waitForMs(2000);\n  welcomeIn.style.display = 'block';\n  await mWind.waitForMs(4000);\n  welcomeIn.style.display = 'none';\n  await mWind.waitForMs(1000);\n  startupMonitor.style.display = 'none';\n  form.style.display = 'flex';\n  parchment.style.display = 'block';\n  header.style.display = 'block';\n  mWind.fillIntro();\n}\nstartupSequence();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/macWindow.js\n");

/***/ }),

/***/ "./src/scripts/session.js":
/*!********************************!*\
  !*** ./src/scripts/session.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _word_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./word.js */ \"./src/scripts/word.js\");\n/* harmony import */ var _macWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./macWindow.js */ \"./src/scripts/macWindow.js\");\n/* harmony import */ var _explanation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./explanation.js */ \"./src/scripts/explanation.js\");\n\n\n\n\nclass Session {\n  constructor(input) {\n    this.word = new _word_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](input);\n    this.allSloths = [];\n  }\n  async generateSlothsArray() {\n    let sloths = this.word.allPossibleSloths();\n    let longSloths = sloths.filter(function (el) {\n      return el.length > 1 && !el.includes(\" \");\n    });\n    const slothPromises = longSloths.map(async word => {\n      try {\n        const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n        if (response.ok) {\n          return response.json();\n        } else {\n          console.error(`${word} is not a word`);\n          return null;\n        }\n      } catch (error) {\n        console.error(`Error fetching definition for ${word}: ${error.message}`);\n        return null;\n      }\n    });\n    const slothArray = await Promise.all(slothPromises);\n    this.allSloths = slothArray.filter(wordDef => wordDef !== null);\n    this.printSloths(slothArray.filter(wordDef => wordDef !== null));\n  }\n  async printSloths(slothArray) {\n    const slothList1 = document.getElementById('sloth-list1');\n    slothList1.innerHTML = \"\";\n    const slothList2 = document.getElementById('sloth-list2');\n    slothList2.innerHTML = \"\";\n    const slothList3 = document.getElementById('sloth-list3');\n    slothList3.innerHTML = \"\";\n    const intro = document.getElementById('intro-box');\n    intro.style.display = 'none';\n    const slHeader = document.getElementById('slHeader');\n    slHeader.innerHTML = \"\";\n    const resultWindow = new _macWindow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    const youEntered = document.createElement('p');\n    youEntered.id = \"youEntered\";\n    slHeader.append(youEntered);\n    const youEnteredText = `You entered the word: `;\n    resultWindow.playClicking();\n    await resultWindow.typeWords(youEnteredText, youEntered);\n    resultWindow.typing.pause();\n    const expWindow = new _macWindow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    const yourWord = `${this.word.value}`;\n    await resultWindow.handsTypeWords(yourWord, youEntered, 500, yourWord);\n    const brk = document.createElement('p');\n    brk.innerHTML = \".\";\n    brk.className = \"brk\";\n    slHeader.append(brk);\n    const brk2 = document.createElement('p');\n    brk2.innerHTML = \".\";\n    brk2.className = \"brk2\";\n    if (slothArray.length === 0) {\n      slHeader.append(brk2);\n      const otherSloths = document.createElement('p');\n      otherSloths.id = \"otherSloths\";\n      slHeader.append(otherSloths);\n      const noSloth = `${this.word.value.slice(0, 1).toUpperCase() + this.word.value.slice(1)} is a SlotH-less pattern!!`;\n      resultWindow.playClicking();\n      await resultWindow.typeWords(noSloth, otherSloths);\n      slHeader.append(brk);\n      const celeb = document.createElement('p');\n      celeb.id = 'celeb';\n      const yayNoSloth = \"NO SLOTH! NO SLOTH!\";\n      slHeader.append(celeb);\n      await resultWindow.typeWords(yayNoSloth, celeb);\n      resultWindow.typing.pause();\n      const danceSloth = document.createElement('img');\n      danceSloth.id = \"danceSloth\";\n      danceSloth.src = \"../images/200w.gif\";\n      slHeader.append(danceSloth);\n    } else {\n      const otherSloths = document.createElement('p');\n      otherSloths.id = \"otherSloths\";\n      slHeader.append(otherSloths);\n      let youMighta = `If you had mispositioned one or both hands, there are ${slothArray.length} possible SlotHs you could have typed:`;\n      resultWindow.playClicking();\n      await resultWindow.typeWords(youMighta, otherSloths);\n      resultWindow.typing.pause();\n      if (slothArray.length < 9) {\n        for (const sloth of slothArray) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList1.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value, \"blue\", \"slothTopper\");\n          await resultWindow.waitForMs(1000);\n          const slothToppers = document.getElementsByClassName(\"slothTopper\");\n          for (let i = 0; i < slothToppers.length; i++) {\n            slothToppers[i].style.display = \"none\";\n          }\n        }\n      } else if (slothArray.length > 8 && slothArray.length < 17) {\n        const slothArray1 = slothArray.slice(0, 8);\n        const slothArray2 = slothArray.slice(8);\n        for (const sloth of slothArray1) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList1.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value, \"blue\", \"slothTopper\");\n          await resultWindow.waitForMs(1000);\n          const slothToppers = document.getElementsByClassName(\"slothTopper\");\n          for (let i = 0; i < slothToppers.length; i++) {\n            slothToppers[i].style.display = \"none\";\n          }\n        }\n        for (const sloth of slothArray2) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList2.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value, \"blue\", \"slothTopper\");\n          await resultWindow.waitForMs(1000);\n          const slothToppers = document.getElementsByClassName(\"slothTopper\");\n          for (let i = 0; i < slothToppers.length; i++) {\n            slothToppers[i].style.display = \"none\";\n          }\n        }\n      } else {\n        const slothArray1 = slothArray.slice(0, 8);\n        const slothArray2 = slothArray.slice(8, 16);\n        const slothArray3 = slothArray.slice(16, 24);\n        for (const sloth of slothArray1) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList1.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value, \"blue\", \"slothTopper\");\n          await resultWindow.waitForMs(1000);\n          const slothToppers = document.getElementsByClassName(\"slothTopper\");\n          for (let i = 0; i < slothToppers.length; i++) {\n            slothToppers[i].style.display = \"none\";\n          }\n        }\n        for (const sloth of slothArray2) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList2.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value, \"blue\", \"slothTopper\");\n          await resultWindow.waitForMs(1000);\n          const slothToppers = document.getElementsByClassName(\"slothTopper\");\n          for (let i = 0; i < slothToppers.length; i++) {\n            slothToppers[i].style.display = \"none\";\n          }\n        }\n        for (const sloth of slothArray3) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList3.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value, \"blue\", \"slothTopper\");\n          await resultWindow.waitForMs(1000);\n          const slothToppers = document.getElementsByClassName(\"slothTopper\");\n          for (let i = 0; i < slothToppers.length; i++) {\n            slothToppers[i].style.display = \"none\";\n          }\n        }\n      }\n      const clippy = document.getElementById('clippy');\n      if (clippy) {\n        clippy.style.display = \"flex\";\n      } else {\n        const clippy = document.createElement('div');\n        clippy.id = \"clippy\";\n        lists.append(clippy);\n        clippy.style.display = \"flex\";\n      }\n    }\n  }\n  static async getDef(word) {\n    const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n    if (response.ok) {\n      return response.json();\n    } else {\n      console.error(`${word} is not a word`);\n      return null;\n    }\n  }\n  static async modalDef(word) {\n    const modalWrapper = document.getElementById('modal-wrapper');\n    const modal = document.getElementById('modal');\n    const definition = await Session.getDef(word);\n    modal.innerHTML = \"\";\n    modal.style.display = \"flex\";\n    modalWrapper.style.display = \"flex\";\n    let partOfSpeech = definition[0].meanings[0].partOfSpeech;\n    let meaning = definition[0].meanings[0].definitions[0].definition;\n    let theWord = definition[0].word.toUpperCase();\n    let pronounce = definition[0].phonetic;\n    modal.append(`${theWord}: `);\n    modal.append(`Phoenetic: ${pronounce}: `);\n    modal.append(`Part of Speech: ${partOfSpeech}: `);\n    modal.append(`Definition: ${meaning}: `);\n  }\n}\nconst lists = document.getElementById('list-box');\nlists.addEventListener('click', e => {\n  console.log(e.target.innerHTML);\n  Session.modalDef(e.target.innerHTML);\n});\nconst exp9Place = document.getElementById('slipExp6');\nconst exp4Place = document.getElementById('slipExp1');\nconst exp5Place = document.getElementById('slipExp2');\nconst exp6Place = document.getElementById('slipExp3');\nconst exp7Place = document.getElementById('slipExp4');\nconst exp8Place = document.getElementById('slipExp5');\nconst asSpot = document.getElementById('as');\nconst upSpot = document.getElementById('up');\nconst yoSpot = document.getElementById('yo');\nconst weSpot = document.getElementById('we');\nconst slothCatBox = document.getElementById('slothcat-box');\nlet modalWrapper = document.getElementById('modal-wrapper');\nmodalWrapper.addEventListener('click', e => {\n  modalWrapper.style.display = \"none\";\n});\nlet instructions = document.getElementById('instructions');\nlet introBox = document.getElementById('intro-box');\ninstructions.addEventListener('click', e => {\n  e.preventDefault();\n  previousRules.style.display = \"none\";\n  nextRules.style.display = \"block\";\n  slothCatBox.style.display = \"none\";\n  const slothGenBox = document.getElementById('slothgen-box');\n  slothGenBox.style.display = 'none';\n  const header = document.getElementById('slHeader');\n  const listBox = document.getElementById('list-box');\n  const keyboard = document.getElementById('keyboard');\n  const rulesBox = document.getElementById(\"explanation-box\");\n  const handPosBox = document.getElementById('handpos-box');\n  yoSpot.innerHTML = \"\";\n  weSpot.innerHTML = \"\";\n  asSpot.innerHTML = \"\";\n  upSpot.innerHTML = \"\";\n  exp4Place.innerHTML = \"\";\n  exp5Place.innerHTML = \"\";\n  exp6Place.innerHTML = \"\";\n  exp7Place.innerHTML = \"\";\n  exp8Place.innerHTML = \"\";\n  exp9Place.innerHTML = \"\";\n  handPosBox.style.display = \"none\";\n  rulesBox.style.display = 'none';\n  listBox.style.display = \"none\";\n  header.style.display = \"none\";\n  introBox.style.display = \"block\";\n  instructions.style.display = \"none\";\n  const rules = document.getElementById('rules');\n  rules.style.display = \"block\";\n  keyboard.className = \"unpressed\";\n  const keyToppers = document.getElementsByClassName(\"keyTopper\");\n  for (let i = 0; i < keyToppers.length; i++) {\n    keyToppers[i].style.display = 'none';\n  }\n  const dtop = document.getElementById('d_topper');\n  const rtop = document.getElementById('r_topper');\n  const ytop = document.getElementById('y_topper');\n  dtop.style.display = \"block\";\n  rtop.style.display = \"block\";\n  ytop.style.display = \"block\";\n  const stop = document.getElementById('s_topper');\n  const etop = document.getElementById('e_topper');\n  const ttop = document.getElementById('t_topper');\n  stop.style.display = \"block\";\n  etop.style.display = \"block\";\n  ttop.style.display = \"block\";\n  const clippy = document.getElementById('clippy');\n  if (clippy) {\n    clippy.style.display = \"none\";\n  }\n});\nconst rulesButton = document.getElementById('rules');\nrulesButton.addEventListener('click', ev => {\n  ev.preventDefault();\n  const intro = document.getElementById('intro-box');\n  intro.style.display = 'none';\n  const rules = document.getElementById('rules');\n  rules.style.display = 'none';\n  const instructions = document.getElementById('instructions');\n  instructions.style.display = 'block';\n  const keyToppers = document.getElementsByClassName(\"keyTopper\");\n  for (let i = 0; i < keyToppers.length; i++) {\n    keyToppers[i].style.display = 'none';\n  }\n  const rulesBox = document.getElementById(\"explanation-box\");\n  rulesBox.style.display = 'flex';\n  // const explanation = new Explanation(rulesBox);\n  // explanation.renderScreen();\n});\nconst clearExpPage = () => {\n  const expPage = document.getElementById('explanation-box');\n  expPage.style.display = 'none';\n};\nconst handPosButton = document.getElementById('handPosButton');\nhandPosButton.addEventListener('click', handleSlipExp);\nconst handPosText = document.getElementById('handpos-text');\nconst handPosText2 = document.getElementById('handpos-text2');\nconst expWindow = new _macWindow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\nasync function handleSlipExp() {\n  clearExpPage();\n  const nextRules = document.getElementById('next');\n  nextRules.style.display = \"block\";\n  const handPosBox = document.getElementById('handpos-box');\n  handPosText.style.display = \"block\";\n  const handKids = handPosText.children;\n  for (let i = 0; i < handKids.length; i++) {\n    handKids[i].style.display = \"block\";\n  }\n  handPosText.innerHTML = \"\";\n  const keyboard = document.getElementById('keyboard');\n  handPosBox.style.display = 'flex';\n  const exp1 = document.createElement('p');\n  handPosText.append(exp1);\n  const exp1Words = \"Each hand is responsible for typing 15 keys in total\";\n  expWindow.playClicking();\n  await expWindow.typeWords(exp1Words, exp1);\n  expWindow.typing.pause();\n  keyboard.className = \"left_pressed\";\n  await expWindow.waitForMs(1000);\n  keyboard.className = \"right_pressed\";\n  await expWindow.waitForMs(1000);\n  keyboard.className = \"unpressed\";\n  let lineBr = document.createElement('p');\n  lineBr.id = \"breakaway\";\n  lineBr.innerHTML = '.';\n  handPosText.append(lineBr);\n  const exp2 = document.createElement('p');\n  handPosText.append(exp2);\n  const exp2Words = \"Each finger is responsible for typing 3 keys, with the exception of the index finger, which covers 6 keys.\";\n  expWindow.typeWords(exp2Words, exp2);\n  const invis = document.createElement('p');\n  await expWindow.handsTypeWords(\"qazwsxedcrfvtgb\", invis, 150);\n  await expWindow.handsTypeWords(\"yhnujmik\", invis, 150, \"yhnujmik\", \"blue\");\n  let key = document.createElement('div');\n  let rightHand = document.getElementById('rh_unpressed');\n  key.id = `comma_topper`;\n  key.className = \"keyTopper\";\n  key.style.backgroundColor = \"blue\";\n  let keyHand = document.getElementById('hands_keys');\n  keyHand.append(key);\n  rightHand.id = 'rh_comma_pressed';\n  await expWindow.waitForMs(150);\n  rightHand.id = 'rh_unpressed';\n  await expWindow.handsTypeWords(\"ol\", invis, 150, \"ol\", \"blue\");\n  let key2 = document.createElement('div');\n  key2.id = `period_topper`;\n  key2.className = \"keyTopper\";\n  key2.style.backgroundColor = \"blue\";\n  keyHand.append(key2);\n  rightHand.id = 'rh_period_pressed';\n  await expWindow.waitForMs(150);\n  rightHand.id = 'rh_unpressed';\n  await expWindow.handsTypeWords(\"p\", invis, 150, \"p\", \"blue\");\n  let key3 = document.createElement('div');\n  key3.id = `semicolon-topper`;\n  key3.className = \"keyTopper\";\n  key3.style.backgroundColor = \"blue\";\n  keyHand.append(key3);\n  rightHand.id = 'rh_semicolon_pressed';\n  await expWindow.waitForMs(150);\n  rightHand.id = 'rh_unpressed';\n  let key4 = document.createElement('div');\n  key4.id = `qmark_topper`;\n  key4.className = \"keyTopper\";\n  key4.style.backgroundColor = \"blue\";\n  keyHand.append(key4);\n  rightHand.id = 'rh_slash_pressed';\n  await expWindow.waitForMs(150);\n  rightHand.id = 'rh_unpressed';\n  await expWindow.waitForMs(1500);\n  const keyToppers = document.getElementsByClassName(\"keyTopper\");\n  for (let i = 0; i < keyToppers.length; i++) {\n    keyToppers[i].style.display = 'none';\n  }\n  let lineBr2 = document.createElement('p');\n  lineBr2.id = \"breakaway2\";\n  lineBr2.innerHTML = '.';\n  handPosText.append(lineBr2);\n  const exp3 = document.createElement('p');\n  handPosText.append(exp3);\n  expWindow.playClicking();\n  ;\n  const exp3Words = \"A hand can slip a maximium of one key vertically and/or one key horizontally, making 8 possible new hand positions for each hand, plus the original position makes 9.\";\n  expWindow.typeWords(exp3Words, exp3);\n  const leftHand = document.getElementById(\"lh_unpressed\");\n  keyboard.className = \"left_pressed\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"left_slip_1\";\n  leftHand.style.marginTop = \"-51px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"left_slip_2\";\n  leftHand.style.marginLeft = \"-51px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"left_slip_3\";\n  leftHand.style.marginTop = \"0px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"left_slip_4\";\n  leftHand.style.marginTop = \"52px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"left_slip_5\";\n  leftHand.style.marginLeft = \"0px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"left_slip_6\";\n  leftHand.style.marginLeft = \"52px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"left_slip_7\";\n  leftHand.style.marginTop = \"0px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"left_slip_8\";\n  leftHand.style.marginTop = \"-51px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"unpressed\";\n  leftHand.style.marginTop = \"0px\";\n  leftHand.style.marginLeft = \"0px\";\n  keyboard.className = \"left_pressed\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"unpressed\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"right_pressed\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"right_slip_1\";\n  rightHand.style.marginTop = \"-51px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"right_slip_2\";\n  rightHand.style.marginLeft = \"51px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"right_slip_3\";\n  rightHand.style.marginTop = \"0px\";\n  expWindow.typing.pause();\n  await expWindow.waitForMs(400);\n  keyboard.className = \"right_slip_4\";\n  rightHand.style.marginTop = \"52px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"right_slip_5\";\n  rightHand.style.marginLeft = \"0px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"right_slip_6\";\n  rightHand.style.marginLeft = \"-51px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"right_slip_7\";\n  rightHand.style.marginTop = \"0px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"right_slip_8\";\n  rightHand.style.marginTop = \"-51px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"right_pressed\";\n  rightHand.style.marginTop = \"0px\";\n  rightHand.style.marginLeft = \"0px\";\n  await expWindow.waitForMs(400);\n  keyboard.className = \"unpressed\";\n}\nconst handPosBox = document.getElementById('handpos-box');\nconst handPosBox2 = document.getElementById('handpos-box2');\nconst previousRules = document.getElementById('previous');\nconst backRules = document.getElementById('backRules');\nbackRules.addEventListener('click', e => {\n  handPosBox.style.display = \"none\";\n  const explanationBox = document.getElementById('explanation-box');\n  explanationBox.style.display = 'block';\n  handPosText2.style.display = 'none';\n  previousRules.style.display = 'none';\n  const slothToppers = document.getElementsByClassName(\"keyTopper\");\n  for (let i = 0; i < slothToppers.length; i++) {\n    slothToppers[i].style.display = \"none\";\n  }\n  exp4Place.innerHTML = \"\";\n  exp5Place.innerHTML = \"\";\n  exp6Place.innerHTML = \"\";\n  exp7Place.innerHTML = \"\";\n  exp8Place.innerHTML = \"\";\n  exp9Place.innerHTML = \"\";\n  yoSpot.innerHTML = \"\";\n  weSpot.innerHTML = \"\";\n  asSpot.innerHTML = \"\";\n  upSpot.innerHTML = \"\";\n});\nconst slothCatText = document.getElementById('slothcat-text');\nconst backRules2 = document.getElementById('backRules2');\nbackRules2.addEventListener('click', e => {\n  slothCatBox.style.display = \"none\";\n  const explanationBox = document.getElementById('explanation-box');\n  explanationBox.style.display = 'block';\n  backRules2.style.display = 'none';\n  const slothToppers = document.getElementsByClassName(\"keyTopper\");\n  for (let i = 0; i < slothToppers.length; i++) {\n    slothToppers[i].style.display = \"none\";\n  }\n});\nconst backRules3 = document.getElementById('backRules3');\nbackRules3.addEventListener('click', e => {\n  backRules3.style.display = 'none';\n  slothGenBox.style.display = 'none';\n  const explanationBox = document.getElementById('explanation-box');\n  explanationBox.style.display = 'block';\n});\nconst nextRules = document.getElementById('next');\nnextRules.addEventListener('click', expNextPage);\nasync function expNextPage() {\n  handPosText.style.display = \"none\";\n  handPosText2.style.display = 'inline';\n  nextRules.style.display = \"none\";\n  previousRules.style.display = \"block\";\n  const exp4 = document.createElement('span');\n  exp4Place.append(exp4);\n  const exp4Words = \"Once a hand has slipped, it must follow the same finger pattern of the word, prior to the slip -- see how the word:  \";\n  expWindow.playClicking();\n  ;\n  await expWindow.typeWords(exp4Words, exp4);\n  expWindow.typing.pause();\n  const yo = \"YO\";\n  await expWindow.handsTypeWords(yo, yoSpot, 500);\n  const exp5 = document.createElement('span');\n  exp5Place.append(exp5);\n  const exp5Words = \" follows the same right hand pattern as \";\n  expWindow.playClicking();\n  ;\n  await expWindow.typeWords(exp5Words, exp5);\n  expWindow.typing.pause();\n  const up = \"UP\";\n  await expWindow.handsTypeWords(up, upSpot, 500, yo, \"blue\");\n  const exp6 = document.createElement('span');\n  exp6Place.append(exp6);\n  const exp6Words = \" simply shifted one key position to the right. \";\n  expWindow.playClicking();\n  await expWindow.typeWords(exp6Words, exp6);\n  expWindow.typing.pause();\n  await expWindow.waitForMs(1000);\n  const exp7 = document.createElement('span');\n  exp7Place.append(exp7);\n  const exp7Words = \" Simililarly we see the same left hand typing pattern shared between\";\n  expWindow.playClicking();\n  await expWindow.typeWords(exp7Words, exp7);\n  expWindow.typing.pause();\n  const as = \"AS\";\n  await expWindow.handsTypeWords(as, asSpot, 500);\n  const exp8 = document.createElement('span');\n  exp8Place.append(exp8);\n  const exp8Words = \" and \";\n  expWindow.playClicking();\n  await expWindow.typeWords(exp8Words, exp8);\n  expWindow.typing.pause();\n  const we = \"WE\";\n  await expWindow.handsTypeWords(we, weSpot, 500, as, \"blue\");\n  await expWindow.waitForMs(1000);\n  const exp9 = document.createElement('span');\n  exp9Place.append(exp9);\n  const exp9Words = \"Assuming each hand can slip indepdently, there are in total 80 possible hand slips from the correct typing position.\";\n  expWindow.playClicking();\n  await expWindow.typeWords(exp9Words, exp9);\n  expWindow.typing.pause();\n}\npreviousRules.addEventListener('click', e => {\n  exp4Place.innerHTML = \"\";\n  exp5Place.innerHTML = \"\";\n  exp6Place.innerHTML = \"\";\n  exp7Place.innerHTML = \"\";\n  exp8Place.innerHTML = \"\";\n  exp9Place.innerHTML = \"\";\n  yoSpot.innerHTML = \"\";\n  weSpot.innerHTML = \"\";\n  asSpot.innerHTML = \"\";\n  upSpot.innerHTML = \"\";\n  const slothToppers = document.getElementsByClassName(\"keyTopper\");\n  for (let i = 0; i < slothToppers.length; i++) {\n    slothToppers[i].style.display = \"none\";\n  }\n  handPosText.style.display = \"block\";\n  previousRules.style.display = \"none\";\n  nextRules.style.display = \"block\";\n});\nconst slothGenBox = document.getElementById(\"slothgen-box\");\nconst slothGenButton = document.getElementById('slothGenButton');\nslothGenButton.addEventListener('click', e => {\n  clearExpPage();\n  slothGenBox.style.display = \"flex\";\n  slothGenBox.style.marginTop = '10px';\n  backRules3.style.display = 'block';\n});\nconst slothCatButton = document.getElementById('slothCatButton');\nslothCatButton.addEventListener('click', handleCatButton);\nasync function handleCatButton() {\n  clearExpPage();\n  for (let i = 0; i < slothCatText.children.length; i++) {\n    slothCatText.children[i].innerHTML = \"\";\n  }\n  backRules2.style.display = 'block';\n  const slothCatBox = document.getElementById('slothcat-box');\n  slothCatBox.style.display = \"block\";\n  slothCatBox.style.marginTop = \"10px\";\n  const class1 = document.createElement('span');\n  const class1Place = document.getElementById('slothCat1');\n  class1Place.append(class1);\n  const class1Words = \"TRUE SlotHs: Created when left and right hand slip in the same direction.  A good example is \";\n  expWindow.playClicking();\n  await expWindow.typeWords(class1Words, class1);\n  expWindow.typing.pause();\n  const gunSpot = document.getElementById('gun');\n  gunSpot.style.color = 'red';\n  await expWindow.handsTypeWords(\"GUN\", gunSpot, 500);\n  const class2 = document.createElement('span');\n  const class2Place = document.getElementById('slothCat2');\n  class2Place.append(class2);\n  const class2Words = \" and  \";\n  expWindow.playClicking();\n  await expWindow.typeWords(class2Words, class2);\n  expWindow.typing.pause();\n  const himSpot = document.getElementById('him');\n  himSpot.style.color = 'blue';\n  await expWindow.handsTypeWords(\"HIM\", himSpot, 500, \"gun\", \"blue\");\n  await expWindow.waitForMs(1000);\n  const class3 = document.createElement('span');\n  const class3Place = document.getElementById('slothCat3');\n  class3Place.append(class3);\n  const class3Words = \"  Notice how the whole word pattern is shifted one key to the right.\";\n  expWindow.playClicking();\n  await expWindow.typeWords(class3Words, class3);\n  expWindow.typing.pause();\n  await expWindow.waitForMs(2000);\n  const slothToppers = document.getElementsByClassName(\"keyTopper\");\n  for (let i = 0; i < slothToppers.length; i++) {\n    slothToppers[i].style.display = \"none\";\n  }\n  const class4 = document.createElement('span');\n  const class4Place = document.getElementById('slothCat4');\n  class4Place.append(class4);\n  const class4Words = \"HAlf SlotHs: Created when one hand slips and the other hand is in the correct typing position.  For example: \";\n  expWindow.playClicking();\n  await expWindow.typeWords(class4Words, class4);\n  expWindow.typing.pause();\n  const tineSpot = document.getElementById('tine');\n  tineSpot.style.color = 'red';\n  await expWindow.handsTypeWords(\"TINE\", tineSpot, 500);\n  const class5 = document.createElement('span');\n  const class5Place = document.getElementById('slothCat5');\n  class5Place.append(class5);\n  const class5Words = \" and  \";\n  expWindow.playClicking();\n  await expWindow.typeWords(class5Words, class5);\n  expWindow.typing.pause();\n  const tubeSpot = document.getElementById('tube');\n  tubeSpot.style.color = 'blue';\n  await expWindow.handsTypeWords(\"TUBE\", tubeSpot, 500, \"TINE\", \"blue\");\n  await expWindow.waitForMs(1000);\n  const class6 = document.createElement('span');\n  const class6Place = document.getElementById('slothCat6');\n  class6Place.append(class6);\n  const class6Words = \" Notice how the left hand is unshifted, but the right hand has slipped one key to the left!  \";\n  expWindow.playClicking();\n  await expWindow.typeWords(class6Words, class6);\n  expWindow.typing.pause();\n  await expWindow.waitForMs(2000);\n  for (let i = 0; i < slothToppers.length; i++) {\n    slothToppers[i].style.display = \"none\";\n  }\n  const class7 = document.createElement('span');\n  const class7Place = document.getElementById('slothCat7');\n  class7Place.append(class7);\n  const class7Words = \"CrAzY SlotHs: Created when each hand slips in a different direction.  For example: \";\n  expWindow.playClicking();\n  await expWindow.typeWords(class7Words, class7);\n  expWindow.typing.pause();\n  const firmSpot = document.getElementById('firm');\n  firmSpot.style.color = 'red';\n  await expWindow.handsTypeWords(\"FINS\", firmSpot, 500);\n  const class8 = document.createElement('span');\n  const class8Place = document.getElementById('slothCat8');\n  class8Place.append(class8);\n  const class8Words = \" and  \";\n  expWindow.playClicking();\n  await expWindow.typeWords(class8Words, class8);\n  expWindow.typing.pause();\n  const domeSpot = document.getElementById('dome');\n  domeSpot.style.color = 'blue';\n  await expWindow.handsTypeWords(\"TOME\", domeSpot, 500, \"FINS\", \"blue\");\n  await expWindow.waitForMs(1000);\n  const class9 = document.createElement('span');\n  const class9Place = document.getElementById('slothCat9');\n  class9Place.append(class9);\n  const class9Words = \" Notice how the right hand shifts right one key, but the left hand shifts up one key as well!\";\n  expWindow.playClicking();\n  await expWindow.typeWords(class9Words, class9);\n  expWindow.typing.pause();\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Session);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/session.js\n");

/***/ }),

/***/ "./src/scripts/word.js":
/*!*****************************!*\
  !*** ./src/scripts/word.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nconst KEYBOARD = [\"1234567890-=\".split(\"\"), [\"tab\"].concat(\"qwertyuiop[]\".split(\"\")), [\"caps lock\"].concat(\"asdfghjkl;'\".split(\"\")), [\"shift\"].concat(\"zxcvbnm,./\".split(\"\")).concat([\"shift\"]), [\"\", \"\", \"\", \" \", \" \", \" \", \" \", \" \", \" \", \"\", \"\", \"\"]];\nclass Word {\n  KEYBOARD = [\"1234567890-=\".split(\"\"), [\"tab\"].concat(\"qwertyuiop[]\".split(\"\")), [\"caps lock\"].concat(\"asdfghjkl;'\".split(\"\")), [\"shift\"].concat(\"zxcvbnm,./\".split(\"\")).concat([\"shift\"]), [\"\", \"\", \"\", \" \", \" \", \" \", \" \", \" \", \" \", \"\", \"\", \"\"]];\n  DIRS = [[-1, 1], [0, 1], [1, 1], [-1, 0], [0, 0], [-1, 0], [-1, -1], [0, -1], [1, -1]];\n  constructor(value) {\n    this.value = value.toLowerCase();\n    this.positionArr = this.toFullPattern();\n  }\n  toFullPattern() {\n    const positionArr = [];\n    let arr = [];\n    arr = this.value.split(\"\");\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < 4; j++) {\n        for (let k = 0; k < this.KEYBOARD[j].length; k++) {\n          if (arr[i] === this.KEYBOARD[j][k]) {\n            positionArr.push([j, k]);\n          }\n        }\n      }\n    }\n    return positionArr;\n  }\n  toRightPattern() {\n    const rightPattern = [];\n    for (let i = 0; i < this.positionArr.length; i++) {\n      if (this.positionArr[i][1] > 5) {\n        rightPattern[i] = this.positionArr[i];\n      } else {\n        rightPattern[i] = undefined;\n      }\n    }\n    return rightPattern;\n  }\n  toLeftPattern() {\n    const leftPattern = [];\n    for (let i = 0; i < this.positionArr.length; i++) {\n      if (this.positionArr[i][1] <= 5) {\n        leftPattern[i] = this.positionArr[i];\n      } else {\n        leftPattern[i] = undefined;\n      }\n    }\n    return leftPattern;\n  }\n  allRightPatterns = () => {\n    const rightPattern = this.toRightPattern();\n    const allTheRightPatterns = [];\n    this.DIRS.forEach(dir => {\n      let subArr = [];\n      for (let i = 0; i < rightPattern.length; i++) {\n        if (rightPattern[i] === undefined) {\n          subArr[i] = undefined;\n        } else {\n          subArr[i] = [rightPattern[i][0] + dir[0], rightPattern[i][1] + dir[1]];\n        }\n      }\n      allTheRightPatterns.push(subArr);\n    });\n    return allTheRightPatterns;\n  };\n  allLeftPatterns = () => {\n    const leftPattern = this.toLeftPattern();\n    const allTheLeftPatterns = [];\n    this.DIRS.forEach(dir => {\n      let subArr = [];\n      for (let i = 0; i < leftPattern.length; i++) {\n        if (leftPattern[i] === undefined) {\n          subArr[i] = undefined;\n        } else {\n          subArr[i] = [leftPattern[i][0] + dir[0], leftPattern[i][1] + dir[1]];\n        }\n      }\n      allTheLeftPatterns.push(subArr);\n    });\n    return allTheLeftPatterns;\n  };\n  allPatternsCompiled() {\n    const alp = this.allLeftPatterns();\n    const arp = this.allRightPatterns();\n    const allPatternsBothHands = [];\n    for (let i = 0; i < alp.length; i++) {\n      for (let j = 0; j < alp.length; j++) {\n        let innerArray = [];\n        for (let k = 0; k < alp[0].length; k++) {\n          if (alp[i][k] !== undefined) {\n            innerArray.push(alp[i][k]);\n          } else {\n            innerArray.push(arp[j][k]);\n          }\n        }\n        allPatternsBothHands.push(innerArray);\n      }\n    }\n    return allPatternsBothHands;\n  }\n  static patternToWord(pattern) {\n    const arr = [];\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz 1234567890-=`,./;'[]\".split(\"\");\n    let caps = false;\n    pattern.forEach(pos => {\n      const char = KEYBOARD[pos[0]][pos[1]];\n      if (alphabet.includes(char)) {\n        arr.push(char);\n      }\n      ;\n    });\n    return arr.join(\"\");\n  }\n  allPossibleSloths() {\n    const allPatsCompiled = this.allPatternsCompiled();\n    const allWordsCompiled = [];\n    allPatsCompiled.forEach(pat => {\n      if (Word.patternToWord(pat) !== this.value && !allWordsCompiled.includes(Word.patternToWord(pat))) {\n        allWordsCompiled.push(Word.patternToWord(pat));\n      }\n    });\n    return allWordsCompiled;\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Word);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/word.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGlwX29mX3RoZV9oYW5kLy4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_keyboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/keyboard.js */ \"./src/scripts/keyboard.js\");\n/* harmony import */ var _scripts_example_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/example.js */ \"./src/scripts/example.js\");\n/* harmony import */ var _scripts_word_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/word.js */ \"./src/scripts/word.js\");\n/* harmony import */ var _scripts_session_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scripts/session.js */ \"./src/scripts/session.js\");\n/* harmony import */ var _scripts_form_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scripts/form.js */ \"./src/scripts/form.js\");\n/* harmony import */ var _scripts_macWindow_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scripts/macWindow.js */ \"./src/scripts/macWindow.js\");\n\n\n\n\n\n\nconsole.log(\"entry point working!\");\n(0,_scripts_example_js__WEBPACK_IMPORTED_MODULE_1__.fn1)();\n\n// const handleKeyDown = function(event){\n//     console.log(\"key!\");\n//     \"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach((letter) => {\n//         if (event.key === letter){\n//             keyboard.className = `${letter}_pressed`\n//         }\n//     })\n\n// }\n\n// const storeWord = function(event){\n//     event.preventDefault();\n//     const word = form.inputbox.value;\n//     console.log(word)\n// }\n\n// const form = document.getElementById('getSloth');\n// form.addEventListener(\"submit\", storeWord);\n\n// const session = new Session(\"hat\");\n// const sloths = session.generateSlothsArray();\n// console.log(sloths)\n\n// let word = new Word(\"find\");\n// word.allPatternsCompiled();\n// let sloths = word.allPossibleSloths();\n// // console.log(sloths)\n// const slothArray = [];\n\n// sloths.forEach(async function fetchWord(word){\n//     const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)\n//     if (response.ok){\n//         return response.json().then((wordDef) => slothArray.push(wordDef))\n//     }\n\n// let dataMuseUrl = `https://api.dictionaryapi.dev/api/v2/entries/en/${word}`\n// fetch(dataMuseUrl)\n//     .then(response => {return response.json()})\n//     .then(data => {console.log(data)})\n// })\n// console.log(slothArray)\n\n// console.log(word)\n// console.log(word.KEYBOARD)\n// const chopped = word.toFullPattern()\n// console.log(\"word\")\n// console.log(word.value)\n// console.log(\"left\")\n// console.log(word.toLeftPattern())\n// console.log(\"right pattern\")\n// const rightPattern = word.toRightPattern();\n// console.log(rightPattern);\n\n// let alp = word.allLeftPatterns();\n// let arp = word.allRightPatterns();\n// console.log(arp)\n// console.log(alp)\n\n// console.log(word.allPatternsCompiled()[0])\n// console.log(word.allPossibleSloths())//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVxRDtBQUNYO0FBQ047QUFDTTtBQUNFO0FBQ0U7QUFFOUNNLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHNCQUFzQixDQUFDO0FBQ25DTix3REFBRyxDQUFDLENBQUM7O0FBSUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUk7QUFDQTtBQUNBO0FBQ0E7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGlwX29mX3RoZV9oYW5kLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCB7IGhhbmRsZUtleURvd24gfSBmcm9tIFwiLi9zY3JpcHRzL2tleWJvYXJkLmpzXCJcbmltcG9ydCB7IGZuMSB9IGZyb20gXCIuL3NjcmlwdHMvZXhhbXBsZS5qc1wiXG5pbXBvcnQgV29yZCBmcm9tIFwiLi9zY3JpcHRzL3dvcmQuanNcIlxuaW1wb3J0IFNlc3Npb24gZnJvbSBcIi4vc2NyaXB0cy9zZXNzaW9uLmpzXCJcbmltcG9ydCB7aGFuZGxlV29yZH0gZnJvbSBcIi4vc2NyaXB0cy9mb3JtLmpzXCJcbmltcG9ydCBtYWNXaW5kb3cgZnJvbSBcIi4vc2NyaXB0cy9tYWNXaW5kb3cuanNcIlxuXG5jb25zb2xlLmxvZyhcImVudHJ5IHBvaW50IHdvcmtpbmchXCIpXG5mbjEoKVxuXG5cblxuLy8gY29uc3QgaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uKGV2ZW50KXtcbi8vICAgICBjb25zb2xlLmxvZyhcImtleSFcIik7XG4vLyAgICAgXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLnNwbGl0KFwiXCIpLmZvckVhY2goKGxldHRlcikgPT4ge1xuLy8gICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBsZXR0ZXIpe1xuLy8gICAgICAgICAgICAga2V5Ym9hcmQuY2xhc3NOYW1lID0gYCR7bGV0dGVyfV9wcmVzc2VkYFxuLy8gICAgICAgICB9XG4vLyAgICAgfSlcbiAgIFxuLy8gfVxuXG4vLyBjb25zdCBzdG9yZVdvcmQgPSBmdW5jdGlvbihldmVudCl7XG4vLyAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbi8vICAgICBjb25zdCB3b3JkID0gZm9ybS5pbnB1dGJveC52YWx1ZTtcbi8vICAgICBjb25zb2xlLmxvZyh3b3JkKVxuLy8gfVxuXG5cblxuXG4vLyBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dldFNsb3RoJyk7XG4vLyBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgc3RvcmVXb3JkKTtcblxuXG4vLyBjb25zdCBzZXNzaW9uID0gbmV3IFNlc3Npb24oXCJoYXRcIik7XG4vLyBjb25zdCBzbG90aHMgPSBzZXNzaW9uLmdlbmVyYXRlU2xvdGhzQXJyYXkoKTtcbi8vIGNvbnNvbGUubG9nKHNsb3RocylcblxuXG5cblxuLy8gbGV0IHdvcmQgPSBuZXcgV29yZChcImZpbmRcIik7XG4vLyB3b3JkLmFsbFBhdHRlcm5zQ29tcGlsZWQoKTtcbi8vIGxldCBzbG90aHMgPSB3b3JkLmFsbFBvc3NpYmxlU2xvdGhzKCk7XG4vLyAvLyBjb25zb2xlLmxvZyhzbG90aHMpXG4vLyBjb25zdCBzbG90aEFycmF5ID0gW107XG5cbi8vIHNsb3Rocy5mb3JFYWNoKGFzeW5jIGZ1bmN0aW9uIGZldGNoV29yZCh3b3JkKXtcbi8vICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS5kaWN0aW9uYXJ5YXBpLmRldi9hcGkvdjIvZW50cmllcy9lbi8ke3dvcmR9YClcbi8vICAgICBpZiAocmVzcG9uc2Uub2spe1xuLy8gICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oKHdvcmREZWYpID0+IHNsb3RoQXJyYXkucHVzaCh3b3JkRGVmKSlcbi8vICAgICB9XG4gICAgXG4gICAgLy8gbGV0IGRhdGFNdXNlVXJsID0gYGh0dHBzOi8vYXBpLmRpY3Rpb25hcnlhcGkuZGV2L2FwaS92Mi9lbnRyaWVzL2VuLyR7d29yZH1gXG4gICAgLy8gZmV0Y2goZGF0YU11c2VVcmwpXG4gICAgLy8gICAgIC50aGVuKHJlc3BvbnNlID0+IHtyZXR1cm4gcmVzcG9uc2UuanNvbigpfSlcbiAgICAvLyAgICAgLnRoZW4oZGF0YSA9PiB7Y29uc29sZS5sb2coZGF0YSl9KVxuLy8gfSlcbi8vIGNvbnNvbGUubG9nKHNsb3RoQXJyYXkpXG5cbi8vIGNvbnNvbGUubG9nKHdvcmQpXG4vLyBjb25zb2xlLmxvZyh3b3JkLktFWUJPQVJEKVxuLy8gY29uc3QgY2hvcHBlZCA9IHdvcmQudG9GdWxsUGF0dGVybigpXG4vLyBjb25zb2xlLmxvZyhcIndvcmRcIilcbi8vIGNvbnNvbGUubG9nKHdvcmQudmFsdWUpXG4vLyBjb25zb2xlLmxvZyhcImxlZnRcIilcbi8vIGNvbnNvbGUubG9nKHdvcmQudG9MZWZ0UGF0dGVybigpKVxuLy8gY29uc29sZS5sb2coXCJyaWdodCBwYXR0ZXJuXCIpXG4vLyBjb25zdCByaWdodFBhdHRlcm4gPSB3b3JkLnRvUmlnaHRQYXR0ZXJuKCk7XG4vLyBjb25zb2xlLmxvZyhyaWdodFBhdHRlcm4pO1xuXG5cblxuLy8gbGV0IGFscCA9IHdvcmQuYWxsTGVmdFBhdHRlcm5zKCk7XG4vLyBsZXQgYXJwID0gd29yZC5hbGxSaWdodFBhdHRlcm5zKCk7XG4vLyBjb25zb2xlLmxvZyhhcnApXG4vLyBjb25zb2xlLmxvZyhhbHApXG5cbi8vIGNvbnNvbGUubG9nKHdvcmQuYWxsUGF0dGVybnNDb21waWxlZCgpWzBdKVxuLy8gY29uc29sZS5sb2cod29yZC5hbGxQb3NzaWJsZVNsb3RocygpKVxuXG5cblxuIl0sIm5hbWVzIjpbImhhbmRsZUtleURvd24iLCJmbjEiLCJXb3JkIiwiU2Vzc2lvbiIsImhhbmRsZVdvcmQiLCJtYWNXaW5kb3ciLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/example.js":
/*!********************************!*\
  !*** ./src/scripts/example.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fn1: function() { return /* binding */ fn1; }\n/* harmony export */ });\nconst fn1 = () => {\n  console.log(\"connected!\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9leGFtcGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFHTyxNQUFNQSxHQUFHLEdBQUdBLENBQUEsS0FBTTtFQUFFQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxZQUFZLENBQUM7QUFBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xpcF9vZl90aGVfaGFuZC8uL3NyYy9zY3JpcHRzL2V4YW1wbGUuanM/ZmNlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuXG5leHBvcnQgY29uc3QgZm4xID0gKCkgPT4geyBjb25zb2xlLmxvZyhcImNvbm5lY3RlZCFcIikgfSA7Il0sIm5hbWVzIjpbImZuMSIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/example.js\n");

/***/ }),

/***/ "./src/scripts/form.js":
/*!*****************************!*\
  !*** ./src/scripts/form.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleWord: function() { return /* binding */ handleWord; }\n/* harmony export */ });\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./session.js */ \"./src/scripts/session.js\");\n\nfunction handleWord(event) {\n  event.preventDefault();\n  const word = form.inputbox.value;\n  const session = new _session_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](word);\n  const rules = document.getElementById('rules');\n  rules.style.display = 'none';\n  const home = document.getElementById('instructions');\n  home.style.display = 'inline';\n  session.generateSlothsArray();\n  const header = document.getElementById('slHeader');\n  const listBox = document.getElementById('list-box');\n  listBox.style.display = \"flex\";\n  header.style.display = \"inline\";\n}\nconst form = document.getElementById('getSloth');\nform.addEventListener(\"submit\", handleWord);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9mb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtDO0FBRWxDLFNBQVNDLFVBQVVBLENBQUVDLEtBQUssRUFBQztFQUN2QkEsS0FBSyxDQUFDQyxjQUFjLENBQUMsQ0FBQztFQUN0QixNQUFNQyxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxLQUFLO0VBQ2hDLE1BQU1DLE9BQU8sR0FBRyxJQUFJUixtREFBTyxDQUFDSSxJQUFJLENBQUM7RUFDakMsTUFBTUssS0FBSyxHQUFHQyxRQUFRLENBQUNDLGNBQWMsQ0FBQyxPQUFPLENBQUM7RUFDOUNGLEtBQUssQ0FBQ0csS0FBSyxDQUFDQyxPQUFPLEdBQUcsTUFBTTtFQUM1QixNQUFNQyxJQUFJLEdBQUdKLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLGNBQWMsQ0FBQztFQUNwREcsSUFBSSxDQUFDRixLQUFLLENBQUNDLE9BQU8sR0FBRyxRQUFRO0VBQzdCTCxPQUFPLENBQUNPLG1CQUFtQixDQUFDLENBQUM7RUFDN0IsTUFBTUMsTUFBTSxHQUFHTixRQUFRLENBQUNDLGNBQWMsQ0FBQyxVQUFVLENBQUM7RUFDbEQsTUFBTU0sT0FBTyxHQUFHUCxRQUFRLENBQUNDLGNBQWMsQ0FBQyxVQUFVLENBQUM7RUFDbkRNLE9BQU8sQ0FBQ0wsS0FBSyxDQUFDQyxPQUFPLEdBQUcsTUFBTTtFQUM5QkcsTUFBTSxDQUFDSixLQUFLLENBQUNDLE9BQU8sR0FBRyxRQUFRO0FBQ25DO0FBS0EsTUFBTVIsSUFBSSxHQUFHSyxRQUFRLENBQUNDLGNBQWMsQ0FBQyxVQUFVLENBQUM7QUFDaEROLElBQUksQ0FBQ2EsZ0JBQWdCLENBQUMsUUFBUSxFQUFFakIsVUFBVSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xpcF9vZl90aGVfaGFuZC8uL3NyYy9zY3JpcHRzL2Zvcm0uanM/Yzc0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2Vzc2lvbiBmcm9tIFwiLi9zZXNzaW9uLmpzXCJcblxuZnVuY3Rpb24gaGFuZGxlV29yZCAoZXZlbnQpe1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3Qgd29yZCA9IGZvcm0uaW5wdXRib3gudmFsdWU7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IG5ldyBTZXNzaW9uKHdvcmQpXG4gICAgY29uc3QgcnVsZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncnVsZXMnKVxuICAgIHJ1bGVzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgY29uc3QgaG9tZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnN0cnVjdGlvbnMnKTtcbiAgICBob21lLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJ1xuICAgIHNlc3Npb24uZ2VuZXJhdGVTbG90aHNBcnJheSgpO1xuICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbEhlYWRlcicpXG4gICAgY29uc3QgbGlzdEJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaXN0LWJveCcpXG4gICAgbGlzdEJveC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCJcbiAgICBoZWFkZXIuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lXCJcbn1cblxuXG5cblxuY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnZXRTbG90aCcpO1xuZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGhhbmRsZVdvcmQpO1xuXG5leHBvcnQge2hhbmRsZVdvcmR9Il0sIm5hbWVzIjpbIlNlc3Npb24iLCJoYW5kbGVXb3JkIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIndvcmQiLCJmb3JtIiwiaW5wdXRib3giLCJ2YWx1ZSIsInNlc3Npb24iLCJydWxlcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJob21lIiwiZ2VuZXJhdGVTbG90aHNBcnJheSIsImhlYWRlciIsImxpc3RCb3giLCJhZGRFdmVudExpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/form.js\n");

/***/ }),

/***/ "./src/scripts/keyboard.js":
/*!*********************************!*\
  !*** ./src/scripts/keyboard.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleKeyDown: function() { return /* binding */ handleKeyDown; }\n/* harmony export */ });\nconst KEYBOARD = [\"1234567890-=\".split(\"\"), [\"tab\"].concat(\"qwertyuiop[]\".split(\"\")), [\"caps lock\"].concat(\"asdfghjkl;'\".split(\"\")), [\"shift\"].concat(\"zxcvbnm,./\".split(\"\")).concat([\"shift\"]), [\"\", \"\", \"\", \" \", \" \", \" \", \" \", \" \", \" \", \"\", \"\", \"\"]];\nconst handleKeyDown = function (event) {\n  const keyToppers = document.getElementsByClassName(\"keyTopper\");\n  for (let i = 0; i < keyToppers.length; i++) {\n    debugger;\n    keyToppers[i].style.display = 'none';\n  }\n  \"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach(letter => {\n    if (event.key === letter) {\n      keyboard.className = `${letter}_pressed`;\n      if (KEYBOARD[1].slice(0, 6).includes(letter) || KEYBOARD[2].slice(0, 6).includes(letter) || KEYBOARD[3].slice(0, 6).includes(letter) || KEYBOARD[4].slice(0, 6).includes(letter)) {\n        leftHand.id = `lh_${letter}_pressed`;\n      } else {\n        rightHand.id = `rh_${letter}_pressed`;\n      }\n    } else if (event.key === \"[\") {\n      rightHand.id = \"rh_lbrac_pressed\";\n      keyboard.className = \"lbrac_pressed\";\n    } else if (event.key === \"]\") {\n      rightHand.id = \"rh_rbrac_pressed\";\n      keyboard.className = \"rbrac_pressed\";\n    } else if (event.key === \";\") {\n      rightHand.id = \"rh_semicolon_pressed\";\n      keyboard.className = \"semicolon_pressed\";\n    } else if (event.key === \",\") {\n      rightHand.id = \"rh_comma_pressed\";\n      keyboard.className = \"comma_pressed\";\n    } else if (event.key === \".\") {\n      rightHand.id = \"rh_period_pressed\";\n      keyboard.className = \"period_pressed\";\n    } else if (event.key === \"/\") {\n      rightHand.id = \"rh_slash_pressed\";\n      keyboard.className = \"slash_pressed\";\n    } else if (event.key === `'`) {\n      rightHand.id = \"rh_quote_pressed\";\n      keyboard.className = \"quote_pressed\";\n    } else if (event.code === 'Space') {\n      event.preventDefault();\n      rightHand.id = \"rh_space_pressed\";\n      keyboard.className = \"space_pressed\";\n    }\n  });\n};\nconst keyboard = document.getElementById('keyboard');\nconst leftHand = document.querySelector('.leftHand');\nconst rightHand = document.querySelector('.rightHand');\naddEventListener(\"keydown\", handleKeyDown);\naddEventListener(\"keyup\", e => {\n  keyboard.className = \"unpressed\";\n  leftHand.id = \"lh_unpressed\";\n  rightHand.id = \"rh_unpressed\";\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUNDLFNBQVMsR0FBRyxXQUFXO0VBQ2hDRyxRQUFRLENBQUNDLEVBQUUsR0FBRyxjQUFjO0VBQzVCQyxTQUFTLENBQUNELEVBQUUsR0FBRyxjQUFjO0FBQ2pDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsaXBfb2ZfdGhlX2hhbmQvLi9zcmMvc2NyaXB0cy9rZXlib2FyZC5qcz8wZGZhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEtFWUJPQVJEICA9IFtcIjEyMzQ1Njc4OTAtPVwiLnNwbGl0KFwiXCIpLFxuW1widGFiXCJdLmNvbmNhdChcInF3ZXJ0eXVpb3BbXVwiLnNwbGl0KFwiXCIpKSwgXG5bXCJjYXBzIGxvY2tcIl0uY29uY2F0KFwiYXNkZmdoamtsOydcIi5zcGxpdChcIlwiKSksIFxuW1wic2hpZnRcIl0uY29uY2F0KFwienhjdmJubSwuL1wiLnNwbGl0KFwiXCIpKS5jb25jYXQoW1wic2hpZnRcIl0pLFxuW1wiXCIsXCJcIixcIlwiLFwiIFwiLCBcIiBcIiwgXCIgXCIsIFwiIFwiLCBcIiBcIiwgXCIgXCIsIFwiXCIsIFwiXCIsIFwiXCJdXG5dXG5cbmNvbnN0IGhhbmRsZUtleURvd24gPSBmdW5jdGlvbihldmVudCl7XG4gICAgY29uc3Qga2V5VG9wcGVycyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJrZXlUb3BwZXJcIik7XG4gICAgZm9yKGxldCBpID0wOyBpPGtleVRvcHBlcnMubGVuZ3RoOyBpKyspe1xuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAga2V5VG9wcGVyc1tpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgfVxuICAgIFxuICAgIFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIi5zcGxpdChcIlwiKS5mb3JFYWNoKChsZXR0ZXIpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gbGV0dGVyKXtcbiAgICAgICAgICAgIGtleWJvYXJkLmNsYXNzTmFtZSA9IGAke2xldHRlcn1fcHJlc3NlZGA7XG4gICAgICAgICAgICBpZiAoS0VZQk9BUkRbMV0uc2xpY2UoMCw2KS5pbmNsdWRlcyhsZXR0ZXIpfHxcbiAgICAgICAgICAgICAgICBLRVlCT0FSRFsyXS5zbGljZSgwLDYpLmluY2x1ZGVzKGxldHRlcil8fFxuICAgICAgICAgICAgICAgIEtFWUJPQVJEWzNdLnNsaWNlKDAsNikuaW5jbHVkZXMobGV0dGVyKXx8XG4gICAgICAgICAgICAgICAgS0VZQk9BUkRbNF0uc2xpY2UoMCw2KS5pbmNsdWRlcyhsZXR0ZXIpXG4gICAgICAgICAgICApe1xuICAgICAgICAgICAgbGVmdEhhbmQuaWQgPSBgbGhfJHtsZXR0ZXJ9X3ByZXNzZWRgfWVsc2V7XG4gICAgICAgICAgICByaWdodEhhbmQuaWQgPSBgcmhfJHtsZXR0ZXJ9X3ByZXNzZWRgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIltcIil7XG4gICAgICAgICAgICByaWdodEhhbmQuaWQgPSBcInJoX2xicmFjX3ByZXNzZWRcIjtcbiAgICAgICAgICAgIGtleWJvYXJkLmNsYXNzTmFtZSA9IFwibGJyYWNfcHJlc3NlZFwiXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIl1cIil7XG4gICAgICAgICAgICByaWdodEhhbmQuaWQgPSBcInJoX3JicmFjX3ByZXNzZWRcIjtcbiAgICAgICAgICAgIGtleWJvYXJkLmNsYXNzTmFtZSA9IFwicmJyYWNfcHJlc3NlZFwiXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIjtcIil7XG4gICAgICAgICAgICByaWdodEhhbmQuaWQgPSBcInJoX3NlbWljb2xvbl9wcmVzc2VkXCI7XG4gICAgICAgICAgICBrZXlib2FyZC5jbGFzc05hbWUgPSBcInNlbWljb2xvbl9wcmVzc2VkXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIixcIil7XG4gICAgICAgICAgICByaWdodEhhbmQuaWQgPSBcInJoX2NvbW1hX3ByZXNzZWRcIjtcbiAgICAgICAgICAgIGtleWJvYXJkLmNsYXNzTmFtZSA9IFwiY29tbWFfcHJlc3NlZFwiO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCIuXCIpe1xuICAgICAgICAgICAgcmlnaHRIYW5kLmlkID0gXCJyaF9wZXJpb2RfcHJlc3NlZFwiO1xuICAgICAgICAgICAga2V5Ym9hcmQuY2xhc3NOYW1lID0gXCJwZXJpb2RfcHJlc3NlZFwiO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgIHJpZ2h0SGFuZC5pZCA9IFwicmhfc2xhc2hfcHJlc3NlZFwiO1xuICAgICAgICAgICAga2V5Ym9hcmQuY2xhc3NOYW1lID0gXCJzbGFzaF9wcmVzc2VkXCJcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09IGAnYCl7XG4gICAgICAgICAgICByaWdodEhhbmQuaWQgPSBcInJoX3F1b3RlX3ByZXNzZWRcIjtcbiAgICAgICAgICAgIGtleWJvYXJkLmNsYXNzTmFtZSA9IFwicXVvdGVfcHJlc3NlZFwiXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY29kZSA9PT0gJ1NwYWNlJyl7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmlnaHRIYW5kLmlkID0gXCJyaF9zcGFjZV9wcmVzc2VkXCI7XG4gICAgICAgICAgICBrZXlib2FyZC5jbGFzc05hbWUgPSBcInNwYWNlX3ByZXNzZWRcIlxuICAgICAgICB9XG4gICAgfSlcbiAgIFxufVxuXG5cbmNvbnN0IGtleWJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2tleWJvYXJkJyk7XG5jb25zdCBsZWZ0SGFuZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sZWZ0SGFuZCcpO1xuY29uc3QgcmlnaHRIYW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJpZ2h0SGFuZCcpO1xuXG5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcbmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBlID0+IHtcbiAgICBrZXlib2FyZC5jbGFzc05hbWUgPSBcInVucHJlc3NlZFwiO1xuICAgIGxlZnRIYW5kLmlkID0gXCJsaF91bnByZXNzZWRcIjtcbiAgICByaWdodEhhbmQuaWQgPSBcInJoX3VucHJlc3NlZFwiO1xufSlcblxuZXhwb3J0IHtoYW5kbGVLZXlEb3dufSJdLCJuYW1lcyI6WyJLRVlCT0FSRCIsInNwbGl0IiwiY29uY2F0IiwiaGFuZGxlS2V5RG93biIsImV2ZW50Iiwia2V5VG9wcGVycyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImkiLCJsZW5ndGgiLCJzdHlsZSIsImRpc3BsYXkiLCJmb3JFYWNoIiwibGV0dGVyIiwia2V5Iiwia2V5Ym9hcmQiLCJjbGFzc05hbWUiLCJzbGljZSIsImluY2x1ZGVzIiwibGVmdEhhbmQiLCJpZCIsInJpZ2h0SGFuZCIsImNvZGUiLCJwcmV2ZW50RGVmYXVsdCIsImdldEVsZW1lbnRCeUlkIiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/keyboard.js\n");

/***/ }),

/***/ "./src/scripts/macWindow.js":
/*!**********************************!*\
  !*** ./src/scripts/macWindow.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mWind: function() { return /* binding */ mWind; }\n/* harmony export */ });\n/* harmony import */ var _word_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./word.js */ \"./src/scripts/word.js\");\n\nclass MacWindow {\n  constructor() {\n    this.view = document.getElementById(\"inner-monitor\");\n    this.form = document.getElementById(\"getSloth\");\n    this.innerbox = document.getElementById(\"innerBox\");\n    this.slothList = document.getElementById(\"sloth-list\");\n    this.typing = new Audio('../sounds/keyboard-typing-5997.mp3');\n    this.type = new Audio('../sounds/onetype.mp3');\n  }\n  async typeWords(sentence, typedOn) {\n    let wait = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    const letters = sentence.split(\"\");\n    let i = 0;\n    const keyboard = document.getElementById(\"keyboard\");\n    while (i < letters.length) {\n      await this.waitForMs(wait);\n      typedOn.append(letters[i]);\n      i++;\n    }\n  }\n  async keysTypeWords(sentence, typedOn) {\n    let wait = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    const letters = sentence.split(\"\");\n    let i = 0;\n    const keyboard = document.getElementById(\"keyboard\");\n    while (i < letters.length) {\n      await this.waitForMs(wait);\n      typedOn.append(letters[i]);\n      if (letters[i] === \" \") {\n        keyboard.className = \"space_pressed\";\n      } else {\n        keyboard.className = `${letters[i].toLowerCase()}_pressed`;\n      }\n      i++;\n    }\n    await this.waitForMs(wait);\n    keyboard.className = \"unpressed\";\n  }\n  async handsTypeWords(sentence, typedOn) {\n    let wait = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    let orig = arguments.length > 3 ? arguments[3] : undefined;\n    let color = arguments.length > 4 ? arguments[4] : undefined;\n    const left = \"qwertgfdsazxcvb\".split(\"\");\n    const right = \"yuiophjklnm\".split(\"\");\n    const origLetters = new _word_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](orig);\n    const letters = new _word_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](sentence);\n    const origLettersArr = orig.split(\"\");\n    const lettersArr = sentence.split(\"\");\n    const origPattern = origLetters.toFullPattern();\n    const newPattern = letters.toFullPattern();\n    color ||= \"red\";\n    let leftShift = undefined;\n    let rightShift = undefined;\n    for (let i = 0; i < origPattern.length; i++) {\n      if (left.includes(origLettersArr[i]) && leftShift === undefined) {\n        let leftVertShift = newPattern[i][0] - origPattern[i][0];\n        let leftHorizShift = newPattern[i][1] - origPattern[i][1];\n        leftShift = [leftVertShift, leftHorizShift];\n      } else if (rightShift === undefined) {\n        let rightVertShift = newPattern[i][0] - origPattern[i][0];\n        let rightHorizShift = newPattern[i][1] - origPattern[i][1];\n        rightShift = [rightVertShift, rightHorizShift];\n      }\n    }\n    leftShift ||= [0, 0];\n    rightShift ||= [0, 0];\n    let i = 0;\n    const keyboard = document.getElementById(\"keyboard\");\n    const leftHand = document.getElementsByClassName(\"leftHand\")[0];\n    const rightHand = document.getElementsByClassName(\"rightHand\")[0];\n    leftHand.style.paddingLeft = `${70 + leftShift[1] * 45}px`;\n    leftHand.style.paddingTop = `${100 + leftShift[0] * 45}px`;\n    rightHand.style.paddingLeft = `${360 + rightShift[1] * 45}px`;\n    rightHand.style.paddingTop = `${100 + rightShift[0] * 45}px`;\n    while (i < lettersArr.length) {\n      typedOn.append(lettersArr[i]);\n      if (lettersArr[i] === \" \") {\n        keyboard.className = \"space_pressed\";\n        rightHand.id = \"rh_space_pressed\";\n      } else {\n        keyboard.className = `${lettersArr[i].toLowerCase()}_pressed`;\n      }\n      if (left.includes(origLettersArr[i].toLowerCase())) {\n        leftHand.id = `lh_${origLettersArr[i].toLowerCase()}_pressed`;\n        rightHand.id = \"rh_unpressed\";\n      } else if (right.includes(origLettersArr[i].toLowerCase())) {\n        rightHand.id = `rh_${origLettersArr[i].toLowerCase()}_pressed`;\n        leftHand.id = \"lh_unpressed\";\n      }\n      this.type.play();\n      let key = document.createElement('div');\n      key.id = `${lettersArr[i].toLowerCase()}_topper`;\n      key.className = \"keyTopper\";\n      key.style.backgroundColor = `${color}`;\n      let keyHand = document.getElementById('hands_keys');\n      keyHand.append(key);\n      await this.waitForMs(wait);\n      i++;\n    }\n    keyboard.className = \"unpressed\";\n    leftHand.id = `lh_unpressed`;\n    rightHand.id = `rh_unpressed`;\n    rightHand.style.paddingLeft = \"360px\";\n    rightHand.style.paddingTop = \"100px\";\n    leftHand.style.paddingLeft = \"70px\";\n    leftHand.style.paddingTop = \"100px\";\n  }\n  waitForMs(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  async fillIntro() {\n    this.typing.play();\n    const head = \"Welcome to Slip of the Hand\";\n    const welcome = document.getElementById(\"welcome\");\n    await this.typeWords(head, welcome);\n    const intro1 = \"A Slip of the Hand [SlotH] occurs when you type a word or phrase with one or both hands in the incorrect position, and another word or phrase is typed as a result.\";\n    const para1 = document.getElementById(\"introText1\");\n    await this.typeWords(intro1, para1);\n    const intro2 = \"For example, imagine the hands below are trying to type the word  \";\n    const para2 = document.getElementById(\"introText2\");\n    await this.typeWords(intro2, para2);\n    const dry = \"DRY\";\n    const drySpot = document.getElementById(\"dry\");\n    this.typing.pause();\n    await this.handsTypeWords(dry, drySpot, 700, \"dry\");\n    this.typing.load();\n    this.typing.play();\n    const intro2Cont = \" but accidentally started out typing one key position to the left.\";\n    const para2Cont = document.getElementById(\"introText2Cont\");\n    await this.typeWords(intro2Cont, para2Cont);\n    const leftHand = document.getElementById(\"lh_unpressed\");\n    const rightHand = document.getElementById(\"rh_unpressed\");\n    leftHand.style.paddingLeft = \"35px\";\n    rightHand.style.paddingLeft = \"325px\";\n    await this.waitForMs(500);\n    const intro2ContMore = \"  This would result in typing the word: \";\n    await this.typeWords(intro2ContMore, para2Cont);\n    const set = \"SET\";\n    const setSpot = document.getElementById(\"set\");\n    this.typing.pause();\n    await this.handsTypeWords(set, setSpot, 500, \"dry\", \"blue\");\n    await this.waitForMs(1000);\n    this.typing.play();\n    const slip = \"SLIP OF THE HAND!!\";\n    const slipSpot = document.getElementById(\"slip\");\n    await this.typeWords(slip, slipSpot);\n    this.typing.pause();\n    await this.waitForMs(1000);\n    this.typing.play();\n    const intro3 = \"Go ahead, give it a try!  Enter a word of phrase and see what slips of the hand you could have had!\";\n    const para3 = document.getElementById(\"introText3\");\n    await this.typeWords(intro3, para3);\n    this.typing.pause();\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (MacWindow);\nlet mWind = new MacWindow();\nmWind.fillIntro();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/macWindow.js\n");

/***/ }),

/***/ "./src/scripts/session.js":
/*!********************************!*\
  !*** ./src/scripts/session.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _word_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./word.js */ \"./src/scripts/word.js\");\n/* harmony import */ var _macWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./macWindow.js */ \"./src/scripts/macWindow.js\");\n\n\n\nclass Session {\n  constructor(input) {\n    this.word = new _word_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](input);\n    this.allSloths = [];\n  }\n  async generateSlothsArray() {\n    let sloths = this.word.allPossibleSloths();\n    let longSloths = sloths.filter(function (el) {\n      return el.length > 1 && !el.includes(\" \");\n    });\n    const slothPromises = longSloths.map(async word => {\n      try {\n        const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n        if (response.ok) {\n          return response.json();\n        } else {\n          console.error(`${word} is not a word`);\n          return null;\n        }\n      } catch (error) {\n        console.error(`Error fetching definition for ${word}: ${error.message}`);\n        return null;\n      }\n    });\n    const slothArray = await Promise.all(slothPromises);\n    this.allSloths = slothArray.filter(wordDef => wordDef !== null);\n    this.printSloths(slothArray.filter(wordDef => wordDef !== null));\n  }\n  async printSloths(slothArray) {\n    const slothList1 = document.getElementById('sloth-list1');\n    slothList1.innerHTML = \"\";\n    const slothList2 = document.getElementById('sloth-list2');\n    slothList2.innerHTML = \"\";\n    const slothList3 = document.getElementById('sloth-list3');\n    slothList3.innerHTML = \"\";\n    const intro = document.getElementById('intro-box');\n    intro.style.display = 'none';\n    const slHeader = document.getElementById('slHeader');\n    slHeader.innerHTML = \"\";\n    const resultWindow = new _macWindow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    const youEntered = document.createElement('p');\n    youEntered.id = \"youEntered\";\n    slHeader.append(youEntered);\n    const youEnteredText = `You entered the word: `;\n    await resultWindow.typeWords(youEnteredText, youEntered);\n    const yourWord = `${this.word.value}`;\n    await resultWindow.handsTypeWords(yourWord, youEntered, 500, yourWord);\n    const brk = document.createElement('p');\n    brk.innerHTML = \".\";\n    brk.className = \"brk\";\n    slHeader.append(brk);\n    const brk2 = document.createElement('p');\n    brk2.innerHTML = \".\";\n    brk2.className = \"brk2\";\n    if (slothArray.length === 0) {\n      slHeader.append(brk2);\n      const otherSloths = document.createElement('p');\n      otherSloths.id = \"otherSloths\";\n      slHeader.append(otherSloths);\n      const noSloth = `${this.word.value.slice(0, 1).toUpperCase() + this.word.value.slice(1)} is a SlotH-less pattern!!`;\n      await resultWindow.typeWords(noSloth, otherSloths);\n      slHeader.append(brk);\n      const celeb = document.createElement('p');\n      const yayNoSloth = \"NO SLOTH! NO SLOTH!\";\n      slHeader.append(celeb);\n      await resultWindow.typeWords(yayNoSloth, celeb);\n    } else {\n      const otherSloths = document.createElement('p');\n      otherSloths.id = \"otherSloths\";\n      slHeader.append(otherSloths);\n      let youMighta = `If you had mispositioned one or both hands, there are ${slothArray.length} possible SlotHs you could have typed:`;\n      await resultWindow.typeWords(youMighta, otherSloths);\n      if (slothArray.length < 9) {\n        for (const sloth of slothArray) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList1.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n          await resultWindow.waitForMs(1000);\n        }\n      } else if (slothArray.length > 8 && slothArray.length < 17) {\n        const slothArray1 = slothArray.slice(0, 8);\n        const slothArray2 = slothArray.slice(8);\n        for (const sloth of slothArray1) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList1.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n          await resultWindow.waitForMs(1000);\n        }\n        for (const sloth of slothArray2) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList2.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n          await resultWindow.waitForMs(1000);\n        }\n      } else {\n        const slothArray1 = slothArray.slice(0, 8);\n        const slothArray2 = slothArray.slice(8, 16);\n        const slothArray3 = slothArray.slice(16, 24);\n        for (const sloth of slothArray1) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList1.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n          await resultWindow.waitForMs(1000);\n        }\n        for (const sloth of slothArray2) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList2.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n          await resultWindow.waitForMs(1000);\n        }\n        for (const sloth of slothArray3) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList3.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n          await resultWindow.waitForMs(1000);\n        }\n      }\n    }\n  }\n  static async getDef(word) {\n    const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n    if (response.ok) {\n      return response.json();\n    } else {\n      console.error(`${word} is not a word`);\n      return null;\n    }\n  }\n  static async modalDef(word) {\n    const modalWrapper = document.getElementById('modal-wrapper');\n    const modal = document.getElementById('modal');\n    const definition = await Session.getDef(word);\n    modal.innerHTML = \"\";\n    modal.style.display = \"flex\";\n    modalWrapper.style.display = \"flex\";\n    let partOfSpeech = definition[0].meanings[0].partOfSpeech;\n    let meaning = definition[0].meanings[0].definitions[0].definition;\n    let theWord = definition[0].word.toUpperCase();\n    let pronounce = definition[0].phonetic;\n    modal.append(`${theWord}: `);\n    modal.append(`Phoenetic: ${pronounce}: `);\n    modal.append(`Part of Speech: ${partOfSpeech}: `);\n    modal.append(`Definition: ${meaning}: `);\n  }\n}\nconst lists = document.getElementById('list-box');\nlists.addEventListener('click', e => {\n  console.log(e.target.innerHTML);\n  Session.modalDef(e.target.innerHTML);\n});\nlet modalWrapper = document.getElementById('modal-wrapper');\nmodalWrapper.addEventListener('click', e => {\n  modalWrapper.style.display = \"none\";\n});\nlet instructions = document.getElementById('instructions');\nlet introBox = document.getElementById('intro-box');\ninstructions.addEventListener('click', e => {\n  e.preventDefault();\n  const header = document.getElementById('slHeader');\n  const listBox = document.getElementById('list-box');\n  listBox.style.display = \"none\";\n  header.style.display = \"none\";\n  introBox.style.display = \"block\";\n  instructions.style.display = \"none\";\n  const rules = document.getElementById('rules');\n  rules.style.display = \"block\";\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (Session);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/session.js\n");

/***/ }),

/***/ "./src/scripts/word.js":
/*!*****************************!*\
  !*** ./src/scripts/word.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nconst KEYBOARD = [\"1234567890-=\".split(\"\"), [\"tab\"].concat(\"qwertyuiop[]\".split(\"\")), [\"caps lock\"].concat(\"asdfghjkl;'\".split(\"\")), [\"shift\"].concat(\"zxcvbnm,./\".split(\"\")).concat([\"shift\"]), [\"\", \"\", \"\", \" \", \" \", \" \", \" \", \" \", \" \", \"\", \"\", \"\"]];\nclass Word {\n  KEYBOARD = [\"1234567890-=\".split(\"\"), [\"tab\"].concat(\"qwertyuiop[]\".split(\"\")), [\"caps lock\"].concat(\"asdfghjkl;'\".split(\"\")), [\"shift\"].concat(\"zxcvbnm,./\".split(\"\")).concat([\"shift\"]), [\"\", \"\", \"\", \" \", \" \", \" \", \" \", \" \", \" \", \"\", \"\", \"\"]];\n  DIRS = [[-1, 1], [0, 1], [1, 1], [-1, 0], [0, 0], [-1, 0], [-1, -1], [0, -1], [1, -1]];\n  constructor(value) {\n    this.value = value.toLowerCase();\n    this.positionArr = this.toFullPattern();\n  }\n  toFullPattern() {\n    const positionArr = [];\n    let arr = [];\n    arr = this.value.split(\"\");\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < 4; j++) {\n        for (let k = 0; k < this.KEYBOARD[j].length; k++) {\n          if (arr[i] === this.KEYBOARD[j][k]) {\n            positionArr.push([j, k]);\n          }\n        }\n      }\n    }\n    return positionArr;\n  }\n  toRightPattern() {\n    const rightPattern = [];\n    for (let i = 0; i < this.positionArr.length; i++) {\n      if (this.positionArr[i][1] > 5) {\n        rightPattern[i] = this.positionArr[i];\n      } else {\n        rightPattern[i] = undefined;\n      }\n    }\n    return rightPattern;\n  }\n  toLeftPattern() {\n    const leftPattern = [];\n    for (let i = 0; i < this.positionArr.length; i++) {\n      if (this.positionArr[i][1] <= 5) {\n        leftPattern[i] = this.positionArr[i];\n      } else {\n        leftPattern[i] = undefined;\n      }\n    }\n    return leftPattern;\n  }\n  allRightPatterns = () => {\n    const rightPattern = this.toRightPattern();\n    const allTheRightPatterns = [];\n    this.DIRS.forEach(dir => {\n      let subArr = [];\n      for (let i = 0; i < rightPattern.length; i++) {\n        if (rightPattern[i] === undefined) {\n          subArr[i] = undefined;\n        } else {\n          subArr[i] = [rightPattern[i][0] + dir[0], rightPattern[i][1] + dir[1]];\n        }\n      }\n      allTheRightPatterns.push(subArr);\n    });\n    return allTheRightPatterns;\n  };\n  allLeftPatterns = () => {\n    const leftPattern = this.toLeftPattern();\n    const allTheLeftPatterns = [];\n    this.DIRS.forEach(dir => {\n      let subArr = [];\n      for (let i = 0; i < leftPattern.length; i++) {\n        if (leftPattern[i] === undefined) {\n          subArr[i] = undefined;\n        } else {\n          subArr[i] = [leftPattern[i][0] + dir[0], leftPattern[i][1] + dir[1]];\n        }\n      }\n      allTheLeftPatterns.push(subArr);\n    });\n    return allTheLeftPatterns;\n  };\n  allPatternsCompiled() {\n    const alp = this.allLeftPatterns();\n    const arp = this.allRightPatterns();\n    const allPatternsBothHands = [];\n    for (let i = 0; i < alp.length; i++) {\n      for (let j = 0; j < alp.length; j++) {\n        let innerArray = [];\n        for (let k = 0; k < alp[0].length; k++) {\n          if (alp[i][k] !== undefined) {\n            innerArray.push(alp[i][k]);\n          } else {\n            innerArray.push(arp[j][k]);\n          }\n        }\n        allPatternsBothHands.push(innerArray);\n      }\n    }\n    return allPatternsBothHands;\n  }\n  static patternToWord(pattern) {\n    const arr = [];\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz 1234567890-=`,./;'[]\".split(\"\");\n    let caps = false;\n    pattern.forEach(pos => {\n      const char = KEYBOARD[pos[0]][pos[1]];\n      if (alphabet.includes(char)) {\n        arr.push(char);\n      }\n      ;\n    });\n    return arr.join(\"\");\n  }\n  allPossibleSloths() {\n    const allPatsCompiled = this.allPatternsCompiled();\n    const allWordsCompiled = [];\n    allPatsCompiled.forEach(pat => {\n      if (Word.patternToWord(pat) !== this.value && !allWordsCompiled.includes(Word.patternToWord(pat))) {\n        allWordsCompiled.push(Word.patternToWord(pat));\n      }\n    });\n    return allWordsCompiled;\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Word);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/word.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGlwX29mX3RoZV9oYW5kLy4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;
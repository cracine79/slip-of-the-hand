/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_keyboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/keyboard.js */ \"./src/scripts/keyboard.js\");\n/* harmony import */ var _scripts_example_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/example.js */ \"./src/scripts/example.js\");\n/* harmony import */ var _scripts_word_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/word.js */ \"./src/scripts/word.js\");\n/* harmony import */ var _scripts_session_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scripts/session.js */ \"./src/scripts/session.js\");\n/* harmony import */ var _scripts_form_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scripts/form.js */ \"./src/scripts/form.js\");\n/* harmony import */ var _scripts_macWindow_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scripts/macWindow.js */ \"./src/scripts/macWindow.js\");\n\n\n\n\n\n\nconsole.log(\"entry point working!\");\n(0,_scripts_example_js__WEBPACK_IMPORTED_MODULE_1__.fn1)();\n\n// const handleKeyDown = function(event){\n//     console.log(\"key!\");\n//     \"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach((letter) => {\n//         if (event.key === letter){\n//             keyboard.className = `${letter}_pressed`\n//         }\n//     })\n\n// }\n\n// const storeWord = function(event){\n//     event.preventDefault();\n//     const word = form.inputbox.value;\n//     console.log(word)\n// }\n\n// const form = document.getElementById('getSloth');\n// form.addEventListener(\"submit\", storeWord);\n\n// const session = new Session(\"hat\");\n// const sloths = session.generateSlothsArray();\n// console.log(sloths)\n\n// let word = new Word(\"find\");\n// word.allPatternsCompiled();\n// let sloths = word.allPossibleSloths();\n// // console.log(sloths)\n// const slothArray = [];\n\n// sloths.forEach(async function fetchWord(word){\n//     const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)\n//     if (response.ok){\n//         return response.json().then((wordDef) => slothArray.push(wordDef))\n//     }\n\n// let dataMuseUrl = `https://api.dictionaryapi.dev/api/v2/entries/en/${word}`\n// fetch(dataMuseUrl)\n//     .then(response => {return response.json()})\n//     .then(data => {console.log(data)})\n// })\n// console.log(slothArray)\n\n// console.log(word)\n// console.log(word.KEYBOARD)\n// const chopped = word.toFullPattern()\n// console.log(\"word\")\n// console.log(word.value)\n// console.log(\"left\")\n// console.log(word.toLeftPattern())\n// console.log(\"right pattern\")\n// const rightPattern = word.toRightPattern();\n// console.log(rightPattern);\n\n// let alp = word.allLeftPatterns();\n// let arp = word.allRightPatterns();\n// console.log(arp)\n// console.log(alp)\n\n// console.log(word.allPatternsCompiled()[0])\n// console.log(word.allPossibleSloths())//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVxRDtBQUNYO0FBQ047QUFDTTtBQUNFO0FBQ0U7QUFFOUNNLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHNCQUFzQixDQUFDO0FBQ25DTix3REFBRyxDQUFDLENBQUM7O0FBSUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUk7QUFDQTtBQUNBO0FBQ0E7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGlwX29mX3RoZV9oYW5kLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCB7IGhhbmRsZUtleURvd24gfSBmcm9tIFwiLi9zY3JpcHRzL2tleWJvYXJkLmpzXCJcbmltcG9ydCB7IGZuMSB9IGZyb20gXCIuL3NjcmlwdHMvZXhhbXBsZS5qc1wiXG5pbXBvcnQgV29yZCBmcm9tIFwiLi9zY3JpcHRzL3dvcmQuanNcIlxuaW1wb3J0IFNlc3Npb24gZnJvbSBcIi4vc2NyaXB0cy9zZXNzaW9uLmpzXCJcbmltcG9ydCB7aGFuZGxlV29yZH0gZnJvbSBcIi4vc2NyaXB0cy9mb3JtLmpzXCJcbmltcG9ydCBtYWNXaW5kb3cgZnJvbSBcIi4vc2NyaXB0cy9tYWNXaW5kb3cuanNcIlxuXG5jb25zb2xlLmxvZyhcImVudHJ5IHBvaW50IHdvcmtpbmchXCIpXG5mbjEoKVxuXG5cblxuLy8gY29uc3QgaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uKGV2ZW50KXtcbi8vICAgICBjb25zb2xlLmxvZyhcImtleSFcIik7XG4vLyAgICAgXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLnNwbGl0KFwiXCIpLmZvckVhY2goKGxldHRlcikgPT4ge1xuLy8gICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBsZXR0ZXIpe1xuLy8gICAgICAgICAgICAga2V5Ym9hcmQuY2xhc3NOYW1lID0gYCR7bGV0dGVyfV9wcmVzc2VkYFxuLy8gICAgICAgICB9XG4vLyAgICAgfSlcbiAgIFxuLy8gfVxuXG4vLyBjb25zdCBzdG9yZVdvcmQgPSBmdW5jdGlvbihldmVudCl7XG4vLyAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbi8vICAgICBjb25zdCB3b3JkID0gZm9ybS5pbnB1dGJveC52YWx1ZTtcbi8vICAgICBjb25zb2xlLmxvZyh3b3JkKVxuLy8gfVxuXG5cblxuXG4vLyBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dldFNsb3RoJyk7XG4vLyBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgc3RvcmVXb3JkKTtcblxuXG4vLyBjb25zdCBzZXNzaW9uID0gbmV3IFNlc3Npb24oXCJoYXRcIik7XG4vLyBjb25zdCBzbG90aHMgPSBzZXNzaW9uLmdlbmVyYXRlU2xvdGhzQXJyYXkoKTtcbi8vIGNvbnNvbGUubG9nKHNsb3RocylcblxuXG5cblxuLy8gbGV0IHdvcmQgPSBuZXcgV29yZChcImZpbmRcIik7XG4vLyB3b3JkLmFsbFBhdHRlcm5zQ29tcGlsZWQoKTtcbi8vIGxldCBzbG90aHMgPSB3b3JkLmFsbFBvc3NpYmxlU2xvdGhzKCk7XG4vLyAvLyBjb25zb2xlLmxvZyhzbG90aHMpXG4vLyBjb25zdCBzbG90aEFycmF5ID0gW107XG5cbi8vIHNsb3Rocy5mb3JFYWNoKGFzeW5jIGZ1bmN0aW9uIGZldGNoV29yZCh3b3JkKXtcbi8vICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS5kaWN0aW9uYXJ5YXBpLmRldi9hcGkvdjIvZW50cmllcy9lbi8ke3dvcmR9YClcbi8vICAgICBpZiAocmVzcG9uc2Uub2spe1xuLy8gICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oKHdvcmREZWYpID0+IHNsb3RoQXJyYXkucHVzaCh3b3JkRGVmKSlcbi8vICAgICB9XG4gICAgXG4gICAgLy8gbGV0IGRhdGFNdXNlVXJsID0gYGh0dHBzOi8vYXBpLmRpY3Rpb25hcnlhcGkuZGV2L2FwaS92Mi9lbnRyaWVzL2VuLyR7d29yZH1gXG4gICAgLy8gZmV0Y2goZGF0YU11c2VVcmwpXG4gICAgLy8gICAgIC50aGVuKHJlc3BvbnNlID0+IHtyZXR1cm4gcmVzcG9uc2UuanNvbigpfSlcbiAgICAvLyAgICAgLnRoZW4oZGF0YSA9PiB7Y29uc29sZS5sb2coZGF0YSl9KVxuLy8gfSlcbi8vIGNvbnNvbGUubG9nKHNsb3RoQXJyYXkpXG5cbi8vIGNvbnNvbGUubG9nKHdvcmQpXG4vLyBjb25zb2xlLmxvZyh3b3JkLktFWUJPQVJEKVxuLy8gY29uc3QgY2hvcHBlZCA9IHdvcmQudG9GdWxsUGF0dGVybigpXG4vLyBjb25zb2xlLmxvZyhcIndvcmRcIilcbi8vIGNvbnNvbGUubG9nKHdvcmQudmFsdWUpXG4vLyBjb25zb2xlLmxvZyhcImxlZnRcIilcbi8vIGNvbnNvbGUubG9nKHdvcmQudG9MZWZ0UGF0dGVybigpKVxuLy8gY29uc29sZS5sb2coXCJyaWdodCBwYXR0ZXJuXCIpXG4vLyBjb25zdCByaWdodFBhdHRlcm4gPSB3b3JkLnRvUmlnaHRQYXR0ZXJuKCk7XG4vLyBjb25zb2xlLmxvZyhyaWdodFBhdHRlcm4pO1xuXG5cblxuLy8gbGV0IGFscCA9IHdvcmQuYWxsTGVmdFBhdHRlcm5zKCk7XG4vLyBsZXQgYXJwID0gd29yZC5hbGxSaWdodFBhdHRlcm5zKCk7XG4vLyBjb25zb2xlLmxvZyhhcnApXG4vLyBjb25zb2xlLmxvZyhhbHApXG5cbi8vIGNvbnNvbGUubG9nKHdvcmQuYWxsUGF0dGVybnNDb21waWxlZCgpWzBdKVxuLy8gY29uc29sZS5sb2cod29yZC5hbGxQb3NzaWJsZVNsb3RocygpKVxuXG5cblxuIl0sIm5hbWVzIjpbImhhbmRsZUtleURvd24iLCJmbjEiLCJXb3JkIiwiU2Vzc2lvbiIsImhhbmRsZVdvcmQiLCJtYWNXaW5kb3ciLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/example.js":
/*!********************************!*\
  !*** ./src/scripts/example.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fn1: function() { return /* binding */ fn1; }\n/* harmony export */ });\nconst fn1 = () => {\n  console.log(\"connected!\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9leGFtcGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFHTyxNQUFNQSxHQUFHLEdBQUdBLENBQUEsS0FBTTtFQUFFQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxZQUFZLENBQUM7QUFBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xpcF9vZl90aGVfaGFuZC8uL3NyYy9zY3JpcHRzL2V4YW1wbGUuanM/ZmNlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuXG5leHBvcnQgY29uc3QgZm4xID0gKCkgPT4geyBjb25zb2xlLmxvZyhcImNvbm5lY3RlZCFcIikgfSA7Il0sIm5hbWVzIjpbImZuMSIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/example.js\n");

/***/ }),

/***/ "./src/scripts/form.js":
/*!*****************************!*\
  !*** ./src/scripts/form.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleWord: function() { return /* binding */ handleWord; }\n/* harmony export */ });\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./session.js */ \"./src/scripts/session.js\");\n\nfunction handleWord(event) {\n  event.preventDefault();\n  const word = form.inputbox.value;\n  const session = new _session_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](word);\n  session.generateSlothsArray();\n}\nconst form = document.getElementById('getSloth');\nform.addEventListener(\"submit\", handleWord);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9mb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtDO0FBRWxDLFNBQVNDLFVBQVVBLENBQUVDLEtBQUssRUFBQztFQUN2QkEsS0FBSyxDQUFDQyxjQUFjLENBQUMsQ0FBQztFQUN0QixNQUFNQyxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxLQUFLO0VBQ2hDLE1BQU1DLE9BQU8sR0FBRyxJQUFJUixtREFBTyxDQUFDSSxJQUFJLENBQUM7RUFDakNJLE9BQU8sQ0FBQ0MsbUJBQW1CLENBQUMsQ0FBQztBQUNqQztBQUtBLE1BQU1KLElBQUksR0FBR0ssUUFBUSxDQUFDQyxjQUFjLENBQUMsVUFBVSxDQUFDO0FBQ2hETixJQUFJLENBQUNPLGdCQUFnQixDQUFDLFFBQVEsRUFBRVgsVUFBVSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xpcF9vZl90aGVfaGFuZC8uL3NyYy9zY3JpcHRzL2Zvcm0uanM/Yzc0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2Vzc2lvbiBmcm9tIFwiLi9zZXNzaW9uLmpzXCJcblxuZnVuY3Rpb24gaGFuZGxlV29yZCAoZXZlbnQpe1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3Qgd29yZCA9IGZvcm0uaW5wdXRib3gudmFsdWU7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IG5ldyBTZXNzaW9uKHdvcmQpXG4gICAgc2Vzc2lvbi5nZW5lcmF0ZVNsb3Roc0FycmF5KCk7XG59XG5cblxuXG5cbmNvbnN0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2V0U2xvdGgnKTtcbmZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBoYW5kbGVXb3JkKTtcblxuZXhwb3J0IHtoYW5kbGVXb3JkfSJdLCJuYW1lcyI6WyJTZXNzaW9uIiwiaGFuZGxlV29yZCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJ3b3JkIiwiZm9ybSIsImlucHV0Ym94IiwidmFsdWUiLCJzZXNzaW9uIiwiZ2VuZXJhdGVTbG90aHNBcnJheSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/form.js\n");

/***/ }),

/***/ "./src/scripts/keyboard.js":
/*!*********************************!*\
  !*** ./src/scripts/keyboard.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleKeyDown: function() { return /* binding */ handleKeyDown; }\n/* harmony export */ });\nconst KEYBOARD = [\"1234567890-=\".split(\"\"), [\"tab\"].concat(\"qwertyuiop[]\".split(\"\")), [\"caps lock\"].concat(\"asdfghjkl;'\".split(\"\")), [\"shift\"].concat(\"zxcvbnm,./\".split(\"\")).concat([\"shift\"]), [\"\", \"\", \"\", \" \", \" \", \" \", \" \", \" \", \" \", \"\", \"\", \"\"]];\nconst handleKeyDown = function (event) {\n  \"abcdefghijklmnopqrstuvwxyz\".split(\"\").forEach(letter => {\n    if (event.key === letter) {\n      keyboard.className = `${letter}_pressed`;\n      if (KEYBOARD[1].slice(0, 6).includes(letter) || KEYBOARD[2].slice(0, 6).includes(letter) || KEYBOARD[3].slice(0, 6).includes(letter) || KEYBOARD[4].slice(0, 6).includes(letter)) {\n        leftHand.id = `lh_${letter}_pressed`;\n      } else {\n        rightHand.id = `rh_${letter}_pressed`;\n      }\n    } else if (event.key === \"[\") {\n      rightHand.id = \"rh_lbrac_pressed\";\n      keyboard.className = \"lbrac_pressed\";\n    } else if (event.key === \"]\") {\n      rightHand.id = \"rh_rbrac_pressed\";\n      keyboard.className = \"rbrac_pressed\";\n    } else if (event.key === \";\") {\n      rightHand.id = \"rh_semicolon_pressed\";\n      keyboard.className = \"semicolon_pressed\";\n    } else if (event.key === \",\") {\n      rightHand.id = \"rh_comma_pressed\";\n      keyboard.className = \"comma_pressed\";\n    } else if (event.key === \".\") {\n      rightHand.id = \"rh_period_pressed\";\n      keyboard.className = \"period_pressed\";\n    } else if (event.key === \"/\") {\n      rightHand.id = \"rh_slash_pressed\";\n      keyboard.className = \"slash_pressed\";\n    } else if (event.key === `'`) {\n      rightHand.id = \"rh_quote_pressed\";\n      keyboard.className = \"quote_pressed\";\n    } else if (event.code === 'Space') {\n      event.preventDefault();\n      rightHand.id = \"rh_space_pressed\";\n      keyboard.className = \"space_pressed\";\n    }\n  });\n};\nconst keyboard = document.getElementById('keyboard');\nconst leftHand = document.querySelector('.leftHand');\nconst rightHand = document.querySelector('.rightHand');\naddEventListener(\"keydown\", handleKeyDown);\naddEventListener(\"keyup\", e => {\n  keyboard.className = \"unpressed\";\n  leftHand.id = \"lh_unpressed\";\n  rightHand.id = \"rh_unpressed\";\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ekMsQ0FBQyxNQUFNLElBQUlMLEtBQUssQ0FBQ0csR0FBRyxLQUFLLEdBQUcsRUFBRTtNQUMxQk8sU0FBUyxDQUFDRCxFQUFFLEdBQUcsa0JBQWtCO01BQ2pDTCxRQUFRLENBQUNDLFNBQVMsR0FBRyxlQUFlO0lBQ3hDLENBQUMsTUFBTSxJQUFJTCxLQUFLLENBQUNHLEdBQUcsS0FBTSxHQUFFLEVBQUM7TUFDekJPLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHLGtCQUFrQjtNQUNqQ0wsUUFBUSxDQUFDQyxTQUFTLEdBQUcsZUFBZTtJQUN4QyxDQUFDLE1BQU0sSUFBSUwsS0FBSyxDQUFDVyxJQUFJLEtBQUssT0FBTyxFQUFDO01BQzlCWCxLQUFLLENBQUNZLGNBQWMsQ0FBQyxDQUFDO01BQ3RCRixTQUFTLENBQUNELEVBQUUsR0FBRyxrQkFBa0I7TUFDakNMLFFBQVEsQ0FBQ0MsU0FBUyxHQUFHLGVBQWU7SUFDeEM7RUFDSixDQUFDLENBQUM7QUFFTixDQUFDO0FBR0QsTUFBTUQsUUFBUSxHQUFHUyxRQUFRLENBQUNDLGNBQWMsQ0FBQyxVQUFVLENBQUM7QUFDcEQsTUFBTU4sUUFBUSxHQUFHSyxRQUFRLENBQUNFLGFBQWEsQ0FBQyxXQUFXLENBQUM7QUFDcEQsTUFBTUwsU0FBUyxHQUFHRyxRQUFRLENBQUNFLGFBQWEsQ0FBQyxZQUFZLENBQUM7QUFFdERDLGdCQUFnQixDQUFDLFNBQVMsRUFBRWpCLGFBQWEsQ0FBQztBQUMxQ2lCLGdCQUFnQixDQUFDLE9BQU8sRUFBRUMsQ0FBQyxJQUFJO0VBQzNCYixRQUFRLENBQUNDLFNBQVMsR0FBRyxXQUFXO0VBQ2hDRyxRQUFRLENBQUNDLEVBQUUsR0FBRyxjQUFjO0VBQzVCQyxTQUFTLENBQUNELEVBQUUsR0FBRyxjQUFjO0FBQ2pDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsaXBfb2ZfdGhlX2hhbmQvLi9zcmMvc2NyaXB0cy9rZXlib2FyZC5qcz8wZGZhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEtFWUJPQVJEICA9IFtcIjEyMzQ1Njc4OTAtPVwiLnNwbGl0KFwiXCIpLFxuW1widGFiXCJdLmNvbmNhdChcInF3ZXJ0eXVpb3BbXVwiLnNwbGl0KFwiXCIpKSwgXG5bXCJjYXBzIGxvY2tcIl0uY29uY2F0KFwiYXNkZmdoamtsOydcIi5zcGxpdChcIlwiKSksIFxuW1wic2hpZnRcIl0uY29uY2F0KFwienhjdmJubSwuL1wiLnNwbGl0KFwiXCIpKS5jb25jYXQoW1wic2hpZnRcIl0pLFxuW1wiXCIsXCJcIixcIlwiLFwiIFwiLCBcIiBcIiwgXCIgXCIsIFwiIFwiLCBcIiBcIiwgXCIgXCIsIFwiXCIsIFwiXCIsIFwiXCJdXG5dXG5cbmNvbnN0IGhhbmRsZUtleURvd24gPSBmdW5jdGlvbihldmVudCl7XG4gICAgXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLnNwbGl0KFwiXCIpLmZvckVhY2goKGxldHRlcikgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBsZXR0ZXIpe1xuICAgICAgICAgICAga2V5Ym9hcmQuY2xhc3NOYW1lID0gYCR7bGV0dGVyfV9wcmVzc2VkYDtcbiAgICAgICAgICAgIGlmIChLRVlCT0FSRFsxXS5zbGljZSgwLDYpLmluY2x1ZGVzKGxldHRlcil8fFxuICAgICAgICAgICAgICAgIEtFWUJPQVJEWzJdLnNsaWNlKDAsNikuaW5jbHVkZXMobGV0dGVyKXx8XG4gICAgICAgICAgICAgICAgS0VZQk9BUkRbM10uc2xpY2UoMCw2KS5pbmNsdWRlcyhsZXR0ZXIpfHxcbiAgICAgICAgICAgICAgICBLRVlCT0FSRFs0XS5zbGljZSgwLDYpLmluY2x1ZGVzKGxldHRlcilcbiAgICAgICAgICAgICl7XG4gICAgICAgICAgICBsZWZ0SGFuZC5pZCA9IGBsaF8ke2xldHRlcn1fcHJlc3NlZGB9ZWxzZXtcbiAgICAgICAgICAgIHJpZ2h0SGFuZC5pZCA9IGByaF8ke2xldHRlcn1fcHJlc3NlZGBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09IFwiW1wiKXtcbiAgICAgICAgICAgIHJpZ2h0SGFuZC5pZCA9IFwicmhfbGJyYWNfcHJlc3NlZFwiO1xuICAgICAgICAgICAga2V5Ym9hcmQuY2xhc3NOYW1lID0gXCJsYnJhY19wcmVzc2VkXCJcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09IFwiXVwiKXtcbiAgICAgICAgICAgIHJpZ2h0SGFuZC5pZCA9IFwicmhfcmJyYWNfcHJlc3NlZFwiO1xuICAgICAgICAgICAga2V5Ym9hcmQuY2xhc3NOYW1lID0gXCJyYnJhY19wcmVzc2VkXCJcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09IFwiO1wiKXtcbiAgICAgICAgICAgIHJpZ2h0SGFuZC5pZCA9IFwicmhfc2VtaWNvbG9uX3ByZXNzZWRcIjtcbiAgICAgICAgICAgIGtleWJvYXJkLmNsYXNzTmFtZSA9IFwic2VtaWNvbG9uX3ByZXNzZWRcIjtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09IFwiLFwiKXtcbiAgICAgICAgICAgIHJpZ2h0SGFuZC5pZCA9IFwicmhfY29tbWFfcHJlc3NlZFwiO1xuICAgICAgICAgICAga2V5Ym9hcmQuY2xhc3NOYW1lID0gXCJjb21tYV9wcmVzc2VkXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIi5cIil7XG4gICAgICAgICAgICByaWdodEhhbmQuaWQgPSBcInJoX3BlcmlvZF9wcmVzc2VkXCI7XG4gICAgICAgICAgICBrZXlib2FyZC5jbGFzc05hbWUgPSBcInBlcmlvZF9wcmVzc2VkXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIi9cIikge1xuICAgICAgICAgICAgcmlnaHRIYW5kLmlkID0gXCJyaF9zbGFzaF9wcmVzc2VkXCI7XG4gICAgICAgICAgICBrZXlib2FyZC5jbGFzc05hbWUgPSBcInNsYXNoX3ByZXNzZWRcIlxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gYCdgKXtcbiAgICAgICAgICAgIHJpZ2h0SGFuZC5pZCA9IFwicmhfcXVvdGVfcHJlc3NlZFwiO1xuICAgICAgICAgICAga2V5Ym9hcmQuY2xhc3NOYW1lID0gXCJxdW90ZV9wcmVzc2VkXCJcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5jb2RlID09PSAnU3BhY2UnKXtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICByaWdodEhhbmQuaWQgPSBcInJoX3NwYWNlX3ByZXNzZWRcIjtcbiAgICAgICAgICAgIGtleWJvYXJkLmNsYXNzTmFtZSA9IFwic3BhY2VfcHJlc3NlZFwiXG4gICAgICAgIH1cbiAgICB9KVxuICAgXG59XG5cblxuY29uc3Qga2V5Ym9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna2V5Ym9hcmQnKTtcbmNvbnN0IGxlZnRIYW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxlZnRIYW5kJyk7XG5jb25zdCByaWdodEhhbmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmlnaHRIYW5kJyk7XG5cbmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleURvd24pO1xuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGUgPT4ge1xuICAgIGtleWJvYXJkLmNsYXNzTmFtZSA9IFwidW5wcmVzc2VkXCI7XG4gICAgbGVmdEhhbmQuaWQgPSBcImxoX3VucHJlc3NlZFwiO1xuICAgIHJpZ2h0SGFuZC5pZCA9IFwicmhfdW5wcmVzc2VkXCI7XG59KVxuXG5leHBvcnQge2hhbmRsZUtleURvd259Il0sIm5hbWVzIjpbIktFWUJPQVJEIiwic3BsaXQiLCJjb25jYXQiLCJoYW5kbGVLZXlEb3duIiwiZXZlbnQiLCJmb3JFYWNoIiwibGV0dGVyIiwia2V5Iiwia2V5Ym9hcmQiLCJjbGFzc05hbWUiLCJzbGljZSIsImluY2x1ZGVzIiwibGVmdEhhbmQiLCJpZCIsInJpZ2h0SGFuZCIsImNvZGUiLCJwcmV2ZW50RGVmYXVsdCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/keyboard.js\n");

/***/ }),

/***/ "./src/scripts/macWindow.js":
/*!**********************************!*\
  !*** ./src/scripts/macWindow.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mWind: function() { return /* binding */ mWind; }\n/* harmony export */ });\n/* harmony import */ var _word_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./word.js */ \"./src/scripts/word.js\");\n\nclass MacWindow {\n  constructor() {\n    this.view = document.getElementById(\"inner-monitor\");\n    this.form = document.getElementById(\"getSloth\");\n    this.innerbox = document.getElementById(\"innerBox\");\n    this.slothList = document.getElementById(\"sloth-list\");\n  }\n  async typeWords(sentence, typedOn) {\n    let wait = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    const letters = sentence.split(\"\");\n    let i = 0;\n    const keyboard = document.getElementById(\"keyboard\");\n    while (i < letters.length) {\n      await this.waitForMs(wait);\n      typedOn.append(letters[i]);\n      i++;\n    }\n  }\n  async keysTypeWords(sentence, typedOn) {\n    let wait = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    const letters = sentence.split(\"\");\n    let i = 0;\n    const keyboard = document.getElementById(\"keyboard\");\n    while (i < letters.length) {\n      await this.waitForMs(wait);\n      typedOn.append(letters[i]);\n      if (letters[i] === \" \") {\n        keyboard.className = \"space_pressed\";\n      } else {\n        keyboard.className = `${letters[i].toLowerCase()}_pressed`;\n      }\n      i++;\n    }\n    await this.waitForMs(wait);\n    keyboard.className = \"unpressed\";\n  }\n  async handsTypeWords(sentence, typedOn) {\n    let wait = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n    let orig = arguments.length > 3 ? arguments[3] : undefined;\n    const left = \"qwertgfdsazxcvb\".split(\"\");\n    const right = \"yuiophjklnm\".split(\"\");\n    const origLetters = new _word_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](orig);\n    const letters = new _word_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](sentence);\n    const origLettersArr = orig.split(\"\");\n    const lettersArr = sentence.split(\"\");\n    const origPattern = origLetters.toFullPattern();\n    const newPattern = letters.toFullPattern();\n    let leftShift = undefined;\n    let rightShift = undefined;\n    for (let i = 0; i < origPattern.length; i++) {\n      if (left.includes(origLettersArr[i]) && leftShift === undefined) {\n        let leftVertShift = newPattern[i][0] - origPattern[i][0];\n        let leftHorizShift = newPattern[i][1] - origPattern[i][1];\n        leftShift = [leftVertShift, leftHorizShift];\n      } else if (rightShift === undefined) {\n        let rightVertShift = newPattern[i][0] - origPattern[i][0];\n        let rightHorizShift = newPattern[i][1] - origPattern[i][1];\n        rightShift = [rightVertShift, rightHorizShift];\n      }\n    }\n    leftShift ||= [0, 0];\n    rightShift ||= [0, 0];\n    let i = 0;\n    const keyboard = document.getElementById(\"keyboard\");\n    const leftHand = document.getElementsByClassName(\"leftHand\")[0];\n    const rightHand = document.getElementsByClassName(\"rightHand\")[0];\n    leftHand.style.paddingLeft = `${70 + leftShift[1] * 45}px`;\n    leftHand.style.paddingTop = `${100 + leftShift[0] * 45}px`;\n    rightHand.style.paddingLeft = `${360 + rightShift[1] * 45}px`;\n    rightHand.style.paddingTop = `${100 + rightShift[0] * 45}px`;\n    while (i < lettersArr.length) {\n      typedOn.append(lettersArr[i]);\n      if (lettersArr[i] === \" \") {\n        keyboard.className = \"space_pressed\";\n        rightHand.id = \"rh_space_pressed\";\n      } else {\n        keyboard.className = `${lettersArr[i].toLowerCase()}_pressed`;\n      }\n      if (left.includes(origLettersArr[i].toLowerCase())) {\n        leftHand.id = `lh_${origLettersArr[i].toLowerCase()}_pressed`;\n        rightHand.id = \"rh_unpressed\";\n      } else if (right.includes(origLettersArr[i].toLowerCase())) {\n        rightHand.id = `rh_${origLettersArr[i].toLowerCase()}_pressed`;\n        leftHand.id = \"lh_unpressed\";\n      }\n      await this.waitForMs(wait);\n      i++;\n    }\n    keyboard.className = \"unpressed\";\n    leftHand.id = `lh_unpressed`;\n    rightHand.id = `rh_unpressed`;\n    rightHand.style.paddingLeft = \"360px\";\n    rightHand.style.paddingTop = \"100px\";\n    leftHand.style.paddingLeft = \"70px\";\n    leftHand.style.paddingTop = \"100px\";\n  }\n  waitForMs(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  async fillIntro() {\n    const head = \"Welcome to Slip of the Hand\";\n    const welcome = document.getElementById(\"welcome\");\n    await this.typeWords(head, welcome);\n    const intro1 = \"A Slip of the Hand [SlotH] occurs when you type a word or phrase with one or both hands in the incorrect position, and another word or phrase is typed as a result.\";\n    const para1 = document.getElementById(\"introText1\");\n    await this.typeWords(intro1, para1);\n    const intro2 = \"For example, imagine the hands below are trying to type the word  \";\n    const para2 = document.getElementById(\"introText2\");\n    await this.typeWords(intro2, para2);\n    const dry = \"DRY\";\n    const drySpot = document.getElementById(\"dry\");\n    await this.handsTypeWords(dry, drySpot, 700, \"dry\");\n    const intro2Cont = \" but accidentally started out typing one key position to the left.\";\n    const para2Cont = document.getElementById(\"introText2Cont\");\n    await this.typeWords(intro2Cont, para2Cont);\n    const leftHand = document.getElementById(\"lh_unpressed\");\n    const rightHand = document.getElementById(\"rh_unpressed\");\n    leftHand.style.paddingLeft = \"35px\";\n    rightHand.style.paddingLeft = \"325px\";\n    await this.waitForMs(500);\n    const intro2ContMore = \"  This would result in typing the word: \";\n    await this.typeWords(intro2ContMore, para2Cont);\n    const set = \"SET\";\n    const setSpot = document.getElementById(\"set\");\n    await this.handsTypeWords(set, setSpot, 500, \"dry\");\n    await this.waitForMs(1000);\n    const slip = \"SLIP OF THE HAND!!\";\n    const slipSpot = document.getElementById(\"slip\");\n    await this.typeWords(slip, slipSpot);\n    await this.waitForMs(1000);\n    const intro3 = \"Go ahead, give it a try!  Enter a word of phrase and see what slips of the hand you could have had!\";\n    const para3 = document.getElementById(\"introText3\");\n    await this.typeWords(intro3, para3);\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (MacWindow);\nlet mWind = new MacWindow();\nmWind.fillIntro();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDSSxTQUFTLENBQUM0RCxNQUFNLEVBQUVDLEtBQUssQ0FBQztFQUV2QztBQUVKO0FBTUEsK0RBQWVyRSxTQUFTLEVBQUM7QUFDekIsSUFBSXNFLEtBQUssR0FBRyxJQUFJdEUsU0FBUyxDQUFDLENBQUM7QUFDM0JzRSxLQUFLLENBQUNsQixTQUFTLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsaXBfb2ZfdGhlX2hhbmQvLi9zcmMvc2NyaXB0cy9tYWNXaW5kb3cuanM/OTcxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV29yZCBmcm9tIFwiLi93b3JkLmpzXCJcblxuXG5jbGFzcyBNYWNXaW5kb3cge1xuXG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy52aWV3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbm5lci1tb25pdG9yXCIpO1xuICAgICAgICB0aGlzLmZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdldFNsb3RoXCIpO1xuICAgICAgICB0aGlzLmlubmVyYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbm5lckJveFwiKVxuICAgICAgICB0aGlzLnNsb3RoTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2xvdGgtbGlzdFwiKVxuICAgIH1cblxuICAgIGFzeW5jIHR5cGVXb3JkcyhzZW50ZW5jZSwgdHlwZWRPbiwgd2FpdCA9IDMwKXtcbiAgICAgICAgY29uc3QgbGV0dGVycyA9IHNlbnRlbmNlLnNwbGl0KFwiXCIpO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGNvbnN0IGtleWJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrZXlib2FyZFwiKTtcbiAgICAgXG4gICAgICAgIHdoaWxlIChpPGxldHRlcnMubGVuZ3RoKXtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdEZvck1zKHdhaXQpOyBcbiAgICAgICAgICAgIHR5cGVkT24uYXBwZW5kKGxldHRlcnNbaV0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpKytcbiAgICAgICAgfVxuXG4gICAgfSBcblxuICAgIGFzeW5jIGtleXNUeXBlV29yZHMoc2VudGVuY2UsIHR5cGVkT24sIHdhaXQgPSAzMCl7XG4gICAgICAgIGNvbnN0IGxldHRlcnMgPSBzZW50ZW5jZS5zcGxpdChcIlwiKTtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBjb25zdCBrZXlib2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia2V5Ym9hcmRcIik7XG4gICAgIFxuICAgICAgICB3aGlsZSAoaTxsZXR0ZXJzLmxlbmd0aCl7XG4gICAgICAgICAgIFxuICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yTXMod2FpdCk7IFxuICAgICAgICAgICAgdHlwZWRPbi5hcHBlbmQobGV0dGVyc1tpXSk7XG4gICAgICAgICAgICBpZiAobGV0dGVyc1tpXSA9PT0gXCIgXCIpe1xuICAgICAgICAgICAgICAgIGtleWJvYXJkLmNsYXNzTmFtZSA9IFwic3BhY2VfcHJlc3NlZFwiXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleWJvYXJkLmNsYXNzTmFtZSA9IGAke2xldHRlcnNbaV0udG9Mb3dlckNhc2UoKX1fcHJlc3NlZGBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrK1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMud2FpdEZvck1zKHdhaXQpO1xuICAgICAgICBrZXlib2FyZC5jbGFzc05hbWUgPSBcInVucHJlc3NlZFwiO1xuICAgIH1cblxuICAgIFxuXG4gICAgYXN5bmMgaGFuZHNUeXBlV29yZHMoc2VudGVuY2UsIHR5cGVkT24sIHdhaXQgPSAzMCwgb3JpZyl7XG4gICAgICAgIGNvbnN0IGxlZnQgPSBcInF3ZXJ0Z2Zkc2F6eGN2YlwiLnNwbGl0KFwiXCIpO1xuICAgICAgICBjb25zdCByaWdodCA9IFwieXVpb3Boamtsbm1cIi5zcGxpdChcIlwiKVxuICAgICAgICBjb25zdCBvcmlnTGV0dGVycyA9IG5ldyBXb3JkKG9yaWcpO1xuICAgICAgICBjb25zdCBsZXR0ZXJzID0gbmV3IFdvcmQoc2VudGVuY2UpO1xuICAgICAgICBjb25zdCBvcmlnTGV0dGVyc0FyciA9IG9yaWcuc3BsaXQoXCJcIik7XG4gICAgICAgIGNvbnN0IGxldHRlcnNBcnIgPSBzZW50ZW5jZS5zcGxpdChcIlwiKTtcbiAgICAgICAgY29uc3Qgb3JpZ1BhdHRlcm4gPSBvcmlnTGV0dGVycy50b0Z1bGxQYXR0ZXJuKCk7XG4gICAgICAgIGNvbnN0IG5ld1BhdHRlcm4gPSBsZXR0ZXJzLnRvRnVsbFBhdHRlcm4oKTtcblxuICAgICAgICBsZXQgbGVmdFNoaWZ0ID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgcmlnaHRTaGlmdCA9IHVuZGVmaW5lZDtcblxuIFxuICAgICAgICBmb3IobGV0IGk9MDsgaTxvcmlnUGF0dGVybi5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChsZWZ0LmluY2x1ZGVzKG9yaWdMZXR0ZXJzQXJyW2ldKSAmJiBsZWZ0U2hpZnQgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgbGV0IGxlZnRWZXJ0U2hpZnQgPSAobmV3UGF0dGVybltpXVswXS1vcmlnUGF0dGVybltpXVswXSlcbiAgICAgICAgICAgICAgICBsZXQgbGVmdEhvcml6U2hpZnQgPSAobmV3UGF0dGVybltpXVsxXS1vcmlnUGF0dGVybltpXVsxXSlcbiAgICAgICAgICAgICAgICBsZWZ0U2hpZnQgPSBbbGVmdFZlcnRTaGlmdCwgbGVmdEhvcml6U2hpZnRdXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJpZ2h0U2hpZnQgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgbGV0IHJpZ2h0VmVydFNoaWZ0ID0gKG5ld1BhdHRlcm5baV1bMF0tb3JpZ1BhdHRlcm5baV1bMF0pXG4gICAgICAgICAgICAgICAgbGV0IHJpZ2h0SG9yaXpTaGlmdCA9IChuZXdQYXR0ZXJuW2ldWzFdLW9yaWdQYXR0ZXJuW2ldWzFdKVxuICAgICAgICAgICAgICAgIHJpZ2h0U2hpZnQgPSBbcmlnaHRWZXJ0U2hpZnQsIHJpZ2h0SG9yaXpTaGlmdF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxlZnRTaGlmdCB8fD0gWzAsMF1cbiAgICAgICAgcmlnaHRTaGlmdCB8fD0gWzAsMF1cblxuICAgICAgXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgY29uc3Qga2V5Ym9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImtleWJvYXJkXCIpO1xuICAgICAgICBjb25zdCBsZWZ0SGFuZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJsZWZ0SGFuZFwiKVswXTtcbiAgICAgICAgY29uc3QgcmlnaHRIYW5kID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInJpZ2h0SGFuZFwiKVswXTtcbiAgICAgICAgXG4gICAgICAgIGxlZnRIYW5kLnN0eWxlLnBhZGRpbmdMZWZ0ID0gYCR7NzArKGxlZnRTaGlmdFsxXSo0NSl9cHhgXG4gICAgICAgIFxuICAgICAgICBsZWZ0SGFuZC5zdHlsZS5wYWRkaW5nVG9wID0gYCR7MTAwKyhsZWZ0U2hpZnRbMF0qNDUpfXB4YFxuICAgICAgICByaWdodEhhbmQuc3R5bGUucGFkZGluZ0xlZnQgPSBgJHszNjArKHJpZ2h0U2hpZnRbMV0qNDUpfXB4YFxuICAgICAgICByaWdodEhhbmQuc3R5bGUucGFkZGluZ1RvcCA9IGAkezEwMCsocmlnaHRTaGlmdFswXSo0NSl9cHhgXG5cbiAgICAgICAgd2hpbGUgKGk8bGV0dGVyc0Fyci5sZW5ndGgpe1xuICAgICAgICBcbiAgICAgICAgICAgIHR5cGVkT24uYXBwZW5kKGxldHRlcnNBcnJbaV0pO1xuICAgICAgICAgICAgaWYgKGxldHRlcnNBcnJbaV0gPT09IFwiIFwiKXtcbiAgICAgICAgICAgICAgICBrZXlib2FyZC5jbGFzc05hbWUgPSBcInNwYWNlX3ByZXNzZWRcIlxuICAgICAgICAgICAgICAgIHJpZ2h0SGFuZC5pZCA9IFwicmhfc3BhY2VfcHJlc3NlZFwiXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAga2V5Ym9hcmQuY2xhc3NOYW1lID0gYCR7bGV0dGVyc0FycltpXS50b0xvd2VyQ2FzZSgpfV9wcmVzc2VkYFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChsZWZ0LmluY2x1ZGVzKG9yaWdMZXR0ZXJzQXJyW2ldLnRvTG93ZXJDYXNlKCkpKXtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZWZ0SGFuZC5pZCA9IGBsaF8ke29yaWdMZXR0ZXJzQXJyW2ldLnRvTG93ZXJDYXNlKCl9X3ByZXNzZWRgXG4gXG4gICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmlnaHRIYW5kLmlkID0gXCJyaF91bnByZXNzZWRcIlxuICAgICAgICAgICAgfSBlbHNlIGlmIChyaWdodC5pbmNsdWRlcyhvcmlnTGV0dGVyc0FycltpXS50b0xvd2VyQ2FzZSgpKSl7XG4gICAgICAgICAgICAgICAgcmlnaHRIYW5kLmlkID0gYHJoXyR7b3JpZ0xldHRlcnNBcnJbaV0udG9Mb3dlckNhc2UoKX1fcHJlc3NlZGBcbiAgXG4gICAgICAgICAgICAgICAgbGVmdEhhbmQuaWQgPSBcImxoX3VucHJlc3NlZFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRGb3JNcyh3YWl0KTsgXG4gICAgICAgICAgICBpKytcbiAgICAgICAgfVxuICAgICAgICBrZXlib2FyZC5jbGFzc05hbWUgPSBcInVucHJlc3NlZFwiO1xuICAgICAgICBsZWZ0SGFuZC5pZCA9IGBsaF91bnByZXNzZWRgO1xuICAgICAgICByaWdodEhhbmQuaWQgPSBgcmhfdW5wcmVzc2VkYDtcbiAgICAgICAgcmlnaHRIYW5kLnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCIzNjBweFwiXG4gICAgICAgIHJpZ2h0SGFuZC5zdHlsZS5wYWRkaW5nVG9wID0gXCIxMDBweFwiXG4gICAgICAgIGxlZnRIYW5kLnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCI3MHB4XCJcbiAgICAgICAgbGVmdEhhbmQuc3R5bGUucGFkZGluZ1RvcCA9IFwiMTAwcHhcIlxuICAgIH1cblxuXG4gXG4gICAgd2FpdEZvck1zKG1zKXtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpIFxuICAgIH1cblxuICAgIGFzeW5jIGZpbGxJbnRybygpe1xuICAgICAgICBjb25zdCBoZWFkID0gXCJXZWxjb21lIHRvIFNsaXAgb2YgdGhlIEhhbmRcIjtcbiAgICAgICAgY29uc3Qgd2VsY29tZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid2VsY29tZVwiKTtcbiAgICAgICAgYXdhaXQgdGhpcy50eXBlV29yZHMoaGVhZCwgd2VsY29tZSlcbiAgICAgICAgY29uc3QgaW50cm8xID0gXCJBIFNsaXAgb2YgdGhlIEhhbmQgW1Nsb3RIXSBvY2N1cnMgd2hlbiB5b3UgdHlwZSBhIHdvcmQgb3IgcGhyYXNlIHdpdGggb25lIG9yIGJvdGggaGFuZHMgaW4gdGhlIGluY29ycmVjdCBwb3NpdGlvbiwgYW5kIGFub3RoZXIgd29yZCBvciBwaHJhc2UgaXMgdHlwZWQgYXMgYSByZXN1bHQuXCJcbiAgICAgICAgY29uc3QgcGFyYTEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImludHJvVGV4dDFcIik7XG4gICAgICAgIGF3YWl0IHRoaXMudHlwZVdvcmRzKGludHJvMSwgcGFyYTEpXG4gICAgICAgIGNvbnN0IGludHJvMiA9IFwiRm9yIGV4YW1wbGUsIGltYWdpbmUgdGhlIGhhbmRzIGJlbG93IGFyZSB0cnlpbmcgdG8gdHlwZSB0aGUgd29yZCAgXCJcbiAgICAgICAgY29uc3QgcGFyYTIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImludHJvVGV4dDJcIilcbiAgICAgICAgYXdhaXQgdGhpcy50eXBlV29yZHMoaW50cm8yLCBwYXJhMik7XG4gICAgICAgIGNvbnN0IGRyeSA9IFwiRFJZXCI7XG4gICAgICAgIGNvbnN0IGRyeVNwb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRyeVwiKTtcbiAgICAgICAgYXdhaXQgdGhpcy5oYW5kc1R5cGVXb3JkcyhkcnksIGRyeVNwb3QsNzAwLCBcImRyeVwiKTtcbiAgICAgICAgY29uc3QgaW50cm8yQ29udD0gXCIgYnV0IGFjY2lkZW50YWxseSBzdGFydGVkIG91dCB0eXBpbmcgb25lIGtleSBwb3NpdGlvbiB0byB0aGUgbGVmdC5cIiAgXG4gICAgICAgIGNvbnN0IHBhcmEyQ29udCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW50cm9UZXh0MkNvbnRcIilcbiAgICAgICAgYXdhaXQgdGhpcy50eXBlV29yZHMoaW50cm8yQ29udCwgcGFyYTJDb250KTtcblxuICAgICAgICBjb25zdCBsZWZ0SGFuZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGhfdW5wcmVzc2VkXCIpO1xuICAgICAgICBjb25zdCByaWdodEhhbmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJoX3VucHJlc3NlZFwiKTtcbiAgICAgICAgbGVmdEhhbmQuc3R5bGUucGFkZGluZ0xlZnQgPSBcIjM1cHhcIlxuICAgICAgICByaWdodEhhbmQuc3R5bGUucGFkZGluZ0xlZnQgPSBcIjMyNXB4XCJcbiAgICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yTXMoNTAwKTtcbiAgICAgICAgY29uc3QgaW50cm8yQ29udE1vcmUgPSBcIiAgVGhpcyB3b3VsZCByZXN1bHQgaW4gdHlwaW5nIHRoZSB3b3JkOiBcIlxuICAgICAgICBhd2FpdCB0aGlzLnR5cGVXb3JkcyhpbnRybzJDb250TW9yZSwgcGFyYTJDb250KTtcbiAgICAgICAgY29uc3Qgc2V0ID0gXCJTRVRcIjtcbiAgICAgICAgY29uc3Qgc2V0U3BvdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2V0XCIpO1xuICAgICAgICBhd2FpdCB0aGlzLmhhbmRzVHlwZVdvcmRzKHNldCwgc2V0U3BvdCw1MDAsIFwiZHJ5XCIpO1xuICAgICAgICBhd2FpdCB0aGlzLndhaXRGb3JNcygxMDAwKTsgXG4gICAgICAgIGNvbnN0IHNsaXA9IFwiU0xJUCBPRiBUSEUgSEFORCEhXCJcbiAgICAgICAgY29uc3Qgc2xpcFNwb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNsaXBcIilcbiAgICAgICAgYXdhaXQgdGhpcy50eXBlV29yZHMoc2xpcCwgc2xpcFNwb3QpO1xuICAgICAgICBhd2FpdCB0aGlzLndhaXRGb3JNcygxMDAwKTsgXG4gICAgICAgIGNvbnN0IGludHJvMyA9IFwiR28gYWhlYWQsIGdpdmUgaXQgYSB0cnkhICBFbnRlciBhIHdvcmQgb2YgcGhyYXNlIGFuZCBzZWUgd2hhdCBzbGlwcyBvZiB0aGUgaGFuZCB5b3UgY291bGQgaGF2ZSBoYWQhXCJcbiAgICAgICAgY29uc3QgcGFyYTMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImludHJvVGV4dDNcIik7XG4gICAgICAgIGF3YWl0IHRoaXMudHlwZVdvcmRzKGludHJvMywgcGFyYTMpXG5cbiAgICB9XG5cbn1cblxuXG5cblxuXG5leHBvcnQgZGVmYXVsdCBNYWNXaW5kb3c7XG5sZXQgbVdpbmQgPSBuZXcgTWFjV2luZG93KCk7XG5tV2luZC5maWxsSW50cm8oKVxuXG5leHBvcnQgeyBtV2luZCB9O1xuXG5cbiJdLCJuYW1lcyI6WyJXb3JkIiwiTWFjV2luZG93IiwiY29uc3RydWN0b3IiLCJ2aWV3IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImZvcm0iLCJpbm5lcmJveCIsInNsb3RoTGlzdCIsInR5cGVXb3JkcyIsInNlbnRlbmNlIiwidHlwZWRPbiIsIndhaXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJsZXR0ZXJzIiwic3BsaXQiLCJpIiwia2V5Ym9hcmQiLCJ3YWl0Rm9yTXMiLCJhcHBlbmQiLCJrZXlzVHlwZVdvcmRzIiwiY2xhc3NOYW1lIiwidG9Mb3dlckNhc2UiLCJoYW5kc1R5cGVXb3JkcyIsIm9yaWciLCJsZWZ0IiwicmlnaHQiLCJvcmlnTGV0dGVycyIsIm9yaWdMZXR0ZXJzQXJyIiwibGV0dGVyc0FyciIsIm9yaWdQYXR0ZXJuIiwidG9GdWxsUGF0dGVybiIsIm5ld1BhdHRlcm4iLCJsZWZ0U2hpZnQiLCJyaWdodFNoaWZ0IiwiaW5jbHVkZXMiLCJsZWZ0VmVydFNoaWZ0IiwibGVmdEhvcml6U2hpZnQiLCJyaWdodFZlcnRTaGlmdCIsInJpZ2h0SG9yaXpTaGlmdCIsImxlZnRIYW5kIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInJpZ2h0SGFuZCIsInN0eWxlIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nVG9wIiwiaWQiLCJtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImZpbGxJbnRybyIsImhlYWQiLCJ3ZWxjb21lIiwiaW50cm8xIiwicGFyYTEiLCJpbnRybzIiLCJwYXJhMiIsImRyeSIsImRyeVNwb3QiLCJpbnRybzJDb250IiwicGFyYTJDb250IiwiaW50cm8yQ29udE1vcmUiLCJzZXQiLCJzZXRTcG90Iiwic2xpcCIsInNsaXBTcG90IiwiaW50cm8zIiwicGFyYTMiLCJtV2luZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/macWindow.js\n");

/***/ }),

/***/ "./src/scripts/session.js":
/*!********************************!*\
  !*** ./src/scripts/session.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _word_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./word.js */ \"./src/scripts/word.js\");\n/* harmony import */ var _macWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./macWindow.js */ \"./src/scripts/macWindow.js\");\n\n\n\nclass Session {\n  constructor(input) {\n    this.word = new _word_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](input);\n  }\n  async generateSlothsArray() {\n    let sloths = this.word.allPossibleSloths();\n    let longSloths = sloths.filter(function (el) {\n      return el.length > 1 && !el.includes(\" \");\n    });\n    const slothPromises = longSloths.map(async word => {\n      try {\n        const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\n        if (response.ok) {\n          return response.json();\n        } else {\n          console.error(`${word} is not a word`);\n          return null;\n        }\n      } catch (error) {\n        console.error(`Error fetching definition for ${word}: ${error.message}`);\n        return null;\n      }\n    });\n    const slothArray = await Promise.all(slothPromises);\n    this.printSloths(slothArray.filter(wordDef => wordDef !== null));\n  }\n  async printSloths(slothArray) {\n    const slothList1 = document.getElementById('sloth-list1');\n    slothList1.innerHTML = \"\";\n    const slothList2 = document.getElementById('sloth-list2');\n    slothList2.innerHTML = \"\";\n    const slothList3 = document.getElementById('sloth-list3');\n    slothList3.innerHTML = \"\";\n    const intro = document.getElementById('intro-box');\n    intro.innerHTML = \"\";\n    const slHeader = document.getElementById('slHeader');\n    slHeader.innerHTML = \"\";\n    const resultWindow = new _macWindow_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    const youEntered = document.createElement('p');\n    youEntered.id = \"youEntered\";\n    slHeader.append(youEntered);\n    const youEnteredText = `You entered the word: `;\n    await resultWindow.typeWords(youEnteredText, youEntered);\n    const yourWord = `${this.word.value}`;\n    await resultWindow.handsTypeWords(yourWord, youEntered, 500, yourWord);\n    const brk = document.createElement('p');\n    brk.innerHTML = \".\";\n    brk.className = \"brk\";\n    slHeader.append(brk);\n    const brk2 = document.createElement('p');\n    brk2.innerHTML = \".\";\n    brk2.className = \"brk2\";\n    if (slothArray.length === 0) {\n      slHeader.append(brk2);\n      const otherSloths = document.createElement('p');\n      otherSloths.id = \"otherSloths\";\n      slHeader.append(otherSloths);\n      const noSloth = `${this.word.value.slice(0, 1).toUpperCase() + this.word.value.slice(1)} is a SlotH-less pattern!!`;\n      await resultWindow.typeWords(noSloth, otherSloths);\n      slHeader.append(brk);\n      const celeb = document.createElement('p');\n      const yayNoSloth = \"NO SLOTH! NO SLOTH!\";\n      slHeader.append(celeb);\n      await resultWindow.typeWords(yayNoSloth, celeb);\n    } else {\n      const otherSloths = document.createElement('p');\n      otherSloths.id = \"otherSloths\";\n      slHeader.append(otherSloths);\n      const youMighta = `If you had mispositioned one or both hands, you might have typed:`;\n      await resultWindow.typeWords(youMighta, otherSloths);\n      if (slothArray.length < 9) {\n        for (const sloth of slothArray) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList1.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n          await resultWindow.waitForMs(1000);\n        }\n      } else if (slothArray.length > 8 && slothArray.length < 17) {\n        const slothArray1 = slothArray.slice(0, 8);\n        const slothArray2 = slothArray.slice(8);\n        for (const sloth of slothArray1) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList1.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n        }\n        for (const sloth of slothArray2) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList2.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n        }\n      } else {\n        const slothArray1 = slothArray.slice(0, 8);\n        const slothArray2 = slothArray.slice(8, 16);\n        const slothArray3 = slothArray.slice(16, 24);\n        for (const sloth of slothArray1) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList1.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n        }\n        for (const sloth of slothArray2) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList2.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n        }\n        for (const sloth of slothArray3) {\n          const li = document.createElement('li');\n          const word = sloth[0].word;\n          slothList3.appendChild(li);\n          await resultWindow.handsTypeWords(word, li, 500, this.word.value);\n        }\n      }\n    }\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Session);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cyI6WyJ3ZWJwYWNrOi8vc2xpcF9vZl90aGVfaGFuZC8uL3NyYy9zY3JpcHRzL3Nlc3Npb24uanM/ZWRkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV29yZCBmcm9tIFwiLi93b3JkLmpzXCJcbmltcG9ydCBNYWNXaW5kb3cgZnJvbSBcIi4vbWFjV2luZG93LmpzXCJcbmltcG9ydCBtV2luZCBmcm9tIFwiLi9tYWNXaW5kb3cuanNcIlxuXG5jbGFzcyBTZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCl7XG4gICAgICAgIHRoaXMud29yZCA9IG5ldyBXb3JkKGlucHV0KVxuICAgIH1cblxuICAgIGFzeW5jIGdlbmVyYXRlU2xvdGhzQXJyYXkoKSB7XG4gICAgICAgIGxldCBzbG90aHMgPSB0aGlzLndvcmQuYWxsUG9zc2libGVTbG90aHMoKTtcbiAgICAgICAgbGV0IGxvbmdTbG90aHMgPSBzbG90aHMuZmlsdGVyKGZ1bmN0aW9uKGVsKSB7cmV0dXJuIGVsLmxlbmd0aCA+IDEgJiYgIWVsLmluY2x1ZGVzKFwiIFwiKX0pXG4gICAgICAgXG4gICAgICAgIGNvbnN0IHNsb3RoUHJvbWlzZXMgPSBsb25nU2xvdGhzLm1hcChhc3luYyAod29yZCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS5kaWN0aW9uYXJ5YXBpLmRldi9hcGkvdjIvZW50cmllcy9lbi8ke3dvcmR9YCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHt3b3JkfSBpcyBub3QgYSB3b3JkYCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgZGVmaW5pdGlvbiBmb3IgJHt3b3JkfTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgY29uc3Qgc2xvdGhBcnJheSA9IGF3YWl0IFByb21pc2UuYWxsKHNsb3RoUHJvbWlzZXMpO1xuICAgICAgICB0aGlzLnByaW50U2xvdGhzKHNsb3RoQXJyYXkuZmlsdGVyKHdvcmREZWYgPT4gd29yZERlZiAhPT0gbnVsbCkpO1xuICAgIH1cblxuICAgIGFzeW5jIHByaW50U2xvdGhzKHNsb3RoQXJyYXkpe1xuICAgICAgICBjb25zdCBzbG90aExpc3QxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nsb3RoLWxpc3QxJyk7XG4gICAgICAgIHNsb3RoTGlzdDEuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgY29uc3Qgc2xvdGhMaXN0MiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbG90aC1saXN0MicpO1xuICAgICAgICBzbG90aExpc3QyLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIGNvbnN0IHNsb3RoTGlzdDMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2xvdGgtbGlzdDMnKTtcbiAgICAgICAgc2xvdGhMaXN0My5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICBjb25zdCBpbnRybyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnRyby1ib3gnKTtcbiAgICAgICAgaW50cm8uaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgY29uc3Qgc2xIZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2xIZWFkZXInKTtcbiAgICAgICAgc2xIZWFkZXIuaW5uZXJIVE1MID0gXCJcIjtcblxuICAgICAgICBjb25zdCByZXN1bHRXaW5kb3cgPSBuZXcgTWFjV2luZG93KCk7XG5cblxuICAgICAgICBjb25zdCB5b3VFbnRlcmVkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICB5b3VFbnRlcmVkLmlkID0gXCJ5b3VFbnRlcmVkXCJcbiAgICAgICAgc2xIZWFkZXIuYXBwZW5kKHlvdUVudGVyZWQpO1xuXG4gICAgICAgIGNvbnN0IHlvdUVudGVyZWRUZXh0ID0gYFlvdSBlbnRlcmVkIHRoZSB3b3JkOiBgXG4gICAgICAgIGF3YWl0IHJlc3VsdFdpbmRvdy50eXBlV29yZHMoeW91RW50ZXJlZFRleHQsIHlvdUVudGVyZWQpO1xuICAgICAgICBjb25zdCB5b3VyV29yZCA9IGAke3RoaXMud29yZC52YWx1ZX1gXG4gICAgICAgIGF3YWl0IHJlc3VsdFdpbmRvdy5oYW5kc1R5cGVXb3Jkcyh5b3VyV29yZCwgeW91RW50ZXJlZCwgNTAwLCB5b3VyV29yZClcbiAgICAgIFxuICAgICAgICBjb25zdCBicmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIGJyay5pbm5lckhUTUwgPSBcIi5cIjtcbiAgICAgICAgYnJrLmNsYXNzTmFtZT1cImJya1wiXG4gICAgICAgIHNsSGVhZGVyLmFwcGVuZChicmspXG4gICAgICAgIGNvbnN0IGJyazIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIGJyazIuaW5uZXJIVE1MID0gXCIuXCI7XG4gICAgICAgIGJyazIuY2xhc3NOYW1lPVwiYnJrMlwiXG4gICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoc2xvdGhBcnJheS5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgc2xIZWFkZXIuYXBwZW5kKGJyazIpXG4gICAgICAgICAgICBjb25zdCBvdGhlclNsb3RocyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIG90aGVyU2xvdGhzLmlkID0gXCJvdGhlclNsb3Roc1wiXG4gICAgICAgICAgICBzbEhlYWRlci5hcHBlbmQob3RoZXJTbG90aHMpXG4gICAgICAgICAgICBjb25zdCBub1Nsb3RoID0gYCR7dGhpcy53b3JkLnZhbHVlLnNsaWNlKDAsMSkudG9VcHBlckNhc2UoKSt0aGlzLndvcmQudmFsdWUuc2xpY2UoMSl9IGlzIGEgU2xvdEgtbGVzcyBwYXR0ZXJuISFgXG4gICAgICAgICAgICBhd2FpdCByZXN1bHRXaW5kb3cudHlwZVdvcmRzKG5vU2xvdGgsIG90aGVyU2xvdGhzKVxuICAgICAgICAgICAgc2xIZWFkZXIuYXBwZW5kKGJyaylcbiAgICAgICAgICAgIGNvbnN0IGNlbGViID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpXG4gICAgICAgICAgICBjb25zdCB5YXlOb1Nsb3RoID0gXCJOTyBTTE9USCEgTk8gU0xPVEghXCJcbiAgICAgICAgICAgIHNsSGVhZGVyLmFwcGVuZChjZWxlYilcbiAgICAgICAgICAgIGF3YWl0IHJlc3VsdFdpbmRvdy50eXBlV29yZHMoeWF5Tm9TbG90aCwgY2VsZWIpXG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgY29uc3Qgb3RoZXJTbG90aHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICBvdGhlclNsb3Rocy5pZCA9IFwib3RoZXJTbG90aHNcIlxuICAgICAgICAgICAgc2xIZWFkZXIuYXBwZW5kKG90aGVyU2xvdGhzKTtcbiAgICAgICAgICAgIGNvbnN0IHlvdU1pZ2h0YSA9IGBJZiB5b3UgaGFkIG1pc3Bvc2l0aW9uZWQgb25lIG9yIGJvdGggaGFuZHMsIHlvdSBtaWdodCBoYXZlIHR5cGVkOmBcbiAgICAgICAgICAgIGF3YWl0IHJlc3VsdFdpbmRvdy50eXBlV29yZHMoeW91TWlnaHRhLCBvdGhlclNsb3RocylcblxuICAgICAgICAgICAgaWYgKHNsb3RoQXJyYXkubGVuZ3RoIDwgOSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2xvdGggb2Ygc2xvdGhBcnJheSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmQgPSBzbG90aFswXS53b3JkO1xuICAgICAgICAgICAgICAgICAgICBzbG90aExpc3QxLmFwcGVuZENoaWxkKGxpKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcmVzdWx0V2luZG93LmhhbmRzVHlwZVdvcmRzKHdvcmQsIGxpLCA1MDAsIHRoaXMud29yZC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcmVzdWx0V2luZG93LndhaXRGb3JNcygxMDAwKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2xvdGhBcnJheS5sZW5ndGggPiA4ICYmIHNsb3RoQXJyYXkubGVuZ3RoIDwgMTcpe1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsb3RoQXJyYXkxID0gc2xvdGhBcnJheS5zbGljZSgwLDgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsb3RoQXJyYXkyID0gc2xvdGhBcnJheS5zbGljZSg4KTtcblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2xvdGggb2Ygc2xvdGhBcnJheTEpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmQgPSBzbG90aFswXS53b3JkO1xuICAgICAgICAgICAgICAgICAgICBzbG90aExpc3QxLmFwcGVuZENoaWxkKGxpKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcmVzdWx0V2luZG93LmhhbmRzVHlwZVdvcmRzKHdvcmQsIGxpLCA1MDAsIHRoaXMud29yZC52YWx1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzbG90aCBvZiBzbG90aEFycmF5Mil7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29yZCA9IHNsb3RoWzBdLndvcmQ7XG4gICAgICAgICAgICAgICAgICAgIHNsb3RoTGlzdDIuYXBwZW5kQ2hpbGQobGkpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCByZXN1bHRXaW5kb3cuaGFuZHNUeXBlV29yZHMod29yZCwgbGksIDUwMCwgdGhpcy53b3JkLnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2xvdGhBcnJheTEgPSBzbG90aEFycmF5LnNsaWNlKDAsOCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2xvdGhBcnJheTIgPSBzbG90aEFycmF5LnNsaWNlKDgsMTYpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsb3RoQXJyYXkzID0gc2xvdGhBcnJheS5zbGljZSgxNiwyNClcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNsb3RoIG9mIHNsb3RoQXJyYXkxKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkID0gc2xvdGhbMF0ud29yZDtcbiAgICAgICAgICAgICAgICAgICAgc2xvdGhMaXN0MS5hcHBlbmRDaGlsZChsaSk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlc3VsdFdpbmRvdy5oYW5kc1R5cGVXb3Jkcyh3b3JkLCBsaSwgNTAwLCB0aGlzLndvcmQudmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2xvdGggb2Ygc2xvdGhBcnJheTIpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmQgPSBzbG90aFswXS53b3JkO1xuICAgICAgICAgICAgICAgICAgICBzbG90aExpc3QyLmFwcGVuZENoaWxkKGxpKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcmVzdWx0V2luZG93LmhhbmRzVHlwZVdvcmRzKHdvcmQsIGxpLCA1MDAsIHRoaXMud29yZC52YWx1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzbG90aCBvZiBzbG90aEFycmF5Myl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29yZCA9IHNsb3RoWzBdLndvcmQ7XG4gICAgICAgICAgICAgICAgICAgIHNsb3RoTGlzdDMuYXBwZW5kQ2hpbGQobGkpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCByZXN1bHRXaW5kb3cuaGFuZHNUeXBlV29yZHMod29yZCwgbGksIDUwMCwgdGhpcy53b3JkLnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Vzc2lvbiJdLCJuYW1lcyI6WyJXb3JkIiwiTWFjV2luZG93IiwibVdpbmQiLCJTZXNzaW9uIiwiY29uc3RydWN0b3IiLCJpbnB1dCIsIndvcmQiLCJnZW5lcmF0ZVNsb3Roc0FycmF5Iiwic2xvdGhzIiwiYWxsUG9zc2libGVTbG90aHMiLCJsb25nU2xvdGhzIiwiZmlsdGVyIiwiZWwiLCJsZW5ndGgiLCJpbmNsdWRlcyIsInNsb3RoUHJvbWlzZXMiLCJtYXAiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJqc29uIiwiY29uc29sZSIsImVycm9yIiwibWVzc2FnZSIsInNsb3RoQXJyYXkiLCJQcm9taXNlIiwiYWxsIiwicHJpbnRTbG90aHMiLCJ3b3JkRGVmIiwic2xvdGhMaXN0MSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJzbG90aExpc3QyIiwic2xvdGhMaXN0MyIsImludHJvIiwic2xIZWFkZXIiLCJyZXN1bHRXaW5kb3ciLCJ5b3VFbnRlcmVkIiwiY3JlYXRlRWxlbWVudCIsImlkIiwiYXBwZW5kIiwieW91RW50ZXJlZFRleHQiLCJ0eXBlV29yZHMiLCJ5b3VyV29yZCIsInZhbHVlIiwiaGFuZHNUeXBlV29yZHMiLCJicmsiLCJjbGFzc05hbWUiLCJicmsyIiwib3RoZXJTbG90aHMiLCJub1Nsb3RoIiwic2xpY2UiLCJ0b1VwcGVyQ2FzZSIsImNlbGViIiwieWF5Tm9TbG90aCIsInlvdU1pZ2h0YSIsInNsb3RoIiwibGkiLCJhcHBlbmRDaGlsZCIsIndhaXRGb3JNcyIsInNsb3RoQXJyYXkxIiwic2xvdGhBcnJheTIiLCJzbG90aEFycmF5MyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/session.js\n");

/***/ }),

/***/ "./src/scripts/word.js":
/*!*****************************!*\
  !*** ./src/scripts/word.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nconst KEYBOARD = [\"1234567890-=\".split(\"\"), [\"tab\"].concat(\"qwertyuiop[]\".split(\"\")), [\"caps lock\"].concat(\"asdfghjkl;'\".split(\"\")), [\"shift\"].concat(\"zxcvbnm,./\".split(\"\")).concat([\"shift\"]), [\"\", \"\", \"\", \" \", \" \", \" \", \" \", \" \", \" \", \"\", \"\", \"\"]];\nclass Word {\n  KEYBOARD = [\"1234567890-=\".split(\"\"), [\"tab\"].concat(\"qwertyuiop[]\".split(\"\")), [\"caps lock\"].concat(\"asdfghjkl;'\".split(\"\")), [\"shift\"].concat(\"zxcvbnm,./\".split(\"\")).concat([\"shift\"]), [\"\", \"\", \"\", \" \", \" \", \" \", \" \", \" \", \" \", \"\", \"\", \"\"]];\n  DIRS = [[-1, 1], [0, 1], [1, 1], [-1, 0], [0, 0], [-1, 0], [-1, -1], [0, -1], [1, -1]];\n  constructor(value) {\n    this.value = value.toLowerCase();\n    this.positionArr = this.toFullPattern();\n  }\n  toFullPattern() {\n    const positionArr = [];\n    let arr = [];\n    arr = this.value.split(\"\");\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < 4; j++) {\n        for (let k = 0; k < this.KEYBOARD[j].length; k++) {\n          if (arr[i] === this.KEYBOARD[j][k]) {\n            positionArr.push([j, k]);\n          }\n        }\n      }\n    }\n    return positionArr;\n  }\n  toRightPattern() {\n    const rightPattern = [];\n    for (let i = 0; i < this.positionArr.length; i++) {\n      if (this.positionArr[i][1] > 5) {\n        rightPattern[i] = this.positionArr[i];\n      } else {\n        rightPattern[i] = undefined;\n      }\n    }\n    return rightPattern;\n  }\n  toLeftPattern() {\n    const leftPattern = [];\n    for (let i = 0; i < this.positionArr.length; i++) {\n      if (this.positionArr[i][1] <= 5) {\n        leftPattern[i] = this.positionArr[i];\n      } else {\n        leftPattern[i] = undefined;\n      }\n    }\n    return leftPattern;\n  }\n  allRightPatterns = () => {\n    const rightPattern = this.toRightPattern();\n    const allTheRightPatterns = [];\n    this.DIRS.forEach(dir => {\n      let subArr = [];\n      for (let i = 0; i < rightPattern.length; i++) {\n        if (rightPattern[i] === undefined) {\n          subArr[i] = undefined;\n        } else {\n          subArr[i] = [rightPattern[i][0] + dir[0], rightPattern[i][1] + dir[1]];\n        }\n      }\n      allTheRightPatterns.push(subArr);\n    });\n    return allTheRightPatterns;\n  };\n  allLeftPatterns = () => {\n    const leftPattern = this.toLeftPattern();\n    const allTheLeftPatterns = [];\n    this.DIRS.forEach(dir => {\n      let subArr = [];\n      for (let i = 0; i < leftPattern.length; i++) {\n        if (leftPattern[i] === undefined) {\n          subArr[i] = undefined;\n        } else {\n          subArr[i] = [leftPattern[i][0] + dir[0], leftPattern[i][1] + dir[1]];\n        }\n      }\n      allTheLeftPatterns.push(subArr);\n    });\n    return allTheLeftPatterns;\n  };\n  allPatternsCompiled() {\n    const alp = this.allLeftPatterns();\n    const arp = this.allRightPatterns();\n    const allPatternsBothHands = [];\n    for (let i = 0; i < alp.length; i++) {\n      for (let j = 0; j < alp.length; j++) {\n        let innerArray = [];\n        for (let k = 0; k < alp[0].length; k++) {\n          if (alp[i][k] !== undefined) {\n            innerArray.push(alp[i][k]);\n          } else {\n            innerArray.push(arp[j][k]);\n          }\n        }\n        allPatternsBothHands.push(innerArray);\n      }\n    }\n    return allPatternsBothHands;\n  }\n  static patternToWord(pattern) {\n    const arr = [];\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz 1234567890-=`,./;'[]\".split(\"\");\n    let caps = false;\n    pattern.forEach(pos => {\n      const char = KEYBOARD[pos[0]][pos[1]];\n      if (alphabet.includes(char)) {\n        arr.push(char);\n      }\n      ;\n    });\n    return arr.join(\"\");\n  }\n  allPossibleSloths() {\n    const allPatsCompiled = this.allPatternsCompiled();\n    const allWordsCompiled = [];\n    allPatsCompiled.forEach(pat => {\n      if (Word.patternToWord(pat) !== this.value && !allWordsCompiled.includes(Word.patternToWord(pat))) {\n        allWordsCompiled.push(Word.patternToWord(pat));\n      }\n    });\n    return allWordsCompiled;\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Word);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/word.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGlwX29mX3RoZV9oYW5kLy4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;